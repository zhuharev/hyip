package models

import (
	"fmt"
	"time"

	"github.com/jinzhu/gorm"
)

// ===== BEGIN of all query sets

// ===== BEGIN of query set AccountQuerySet

// AccountQuerySet is an queryset type for Account
type AccountQuerySet struct {
	db *gorm.DB
}

// NewAccountQuerySet constructs new AccountQuerySet
func NewAccountQuerySet(db *gorm.DB) AccountQuerySet {
	return AccountQuerySet{
		db: db.Model(&Account{}),
	}
}

func (qs AccountQuerySet) w(db *gorm.DB) AccountQuerySet {
	return NewAccountQuerySet(db)
}

// All is an autogenerated method
// nolint: dupl
func (qs AccountQuerySet) All(ret *[]Account) error {
	return qs.db.Find(ret).Error
}

// AmountEq is an autogenerated method
// nolint: dupl
func (qs AccountQuerySet) AmountEq(amount uint) AccountQuerySet {
	return qs.w(qs.db.Where("amount = ?", amount))
}

// AmountGt is an autogenerated method
// nolint: dupl
func (qs AccountQuerySet) AmountGt(amount uint) AccountQuerySet {
	return qs.w(qs.db.Where("amount > ?", amount))
}

// AmountGte is an autogenerated method
// nolint: dupl
func (qs AccountQuerySet) AmountGte(amount uint) AccountQuerySet {
	return qs.w(qs.db.Where("amount >= ?", amount))
}

// AmountIn is an autogenerated method
// nolint: dupl
func (qs AccountQuerySet) AmountIn(amount uint, amountRest ...uint) AccountQuerySet {
	iArgs := []interface{}{amount}
	for _, arg := range amountRest {
		iArgs = append(iArgs, arg)
	}
	return qs.w(qs.db.Where("amount IN (?)", iArgs))
}

// AmountLt is an autogenerated method
// nolint: dupl
func (qs AccountQuerySet) AmountLt(amount uint) AccountQuerySet {
	return qs.w(qs.db.Where("amount < ?", amount))
}

// AmountLte is an autogenerated method
// nolint: dupl
func (qs AccountQuerySet) AmountLte(amount uint) AccountQuerySet {
	return qs.w(qs.db.Where("amount <= ?", amount))
}

// AmountNe is an autogenerated method
// nolint: dupl
func (qs AccountQuerySet) AmountNe(amount uint) AccountQuerySet {
	return qs.w(qs.db.Where("amount != ?", amount))
}

// AmountNotIn is an autogenerated method
// nolint: dupl
func (qs AccountQuerySet) AmountNotIn(amount uint, amountRest ...uint) AccountQuerySet {
	iArgs := []interface{}{amount}
	for _, arg := range amountRest {
		iArgs = append(iArgs, arg)
	}
	return qs.w(qs.db.Where("amount NOT IN (?)", iArgs))
}

// Count is an autogenerated method
// nolint: dupl
func (qs AccountQuerySet) Count() (int, error) {
	var count int
	err := qs.db.Count(&count).Error
	return count, err
}

// Create is an autogenerated method
// nolint: dupl
func (o *Account) Create(db *gorm.DB) error {
	return db.Create(o).Error
}

// CreatedAtEq is an autogenerated method
// nolint: dupl
func (qs AccountQuerySet) CreatedAtEq(createdAt time.Time) AccountQuerySet {
	return qs.w(qs.db.Where("created_at = ?", createdAt))
}

// CreatedAtGt is an autogenerated method
// nolint: dupl
func (qs AccountQuerySet) CreatedAtGt(createdAt time.Time) AccountQuerySet {
	return qs.w(qs.db.Where("created_at > ?", createdAt))
}

// CreatedAtGte is an autogenerated method
// nolint: dupl
func (qs AccountQuerySet) CreatedAtGte(createdAt time.Time) AccountQuerySet {
	return qs.w(qs.db.Where("created_at >= ?", createdAt))
}

// CreatedAtLt is an autogenerated method
// nolint: dupl
func (qs AccountQuerySet) CreatedAtLt(createdAt time.Time) AccountQuerySet {
	return qs.w(qs.db.Where("created_at < ?", createdAt))
}

// CreatedAtLte is an autogenerated method
// nolint: dupl
func (qs AccountQuerySet) CreatedAtLte(createdAt time.Time) AccountQuerySet {
	return qs.w(qs.db.Where("created_at <= ?", createdAt))
}

// CreatedAtNe is an autogenerated method
// nolint: dupl
func (qs AccountQuerySet) CreatedAtNe(createdAt time.Time) AccountQuerySet {
	return qs.w(qs.db.Where("created_at != ?", createdAt))
}

// CurrencyIDEq is an autogenerated method
// nolint: dupl
func (qs AccountQuerySet) CurrencyIDEq(currencyID uint) AccountQuerySet {
	return qs.w(qs.db.Where("currency_id = ?", currencyID))
}

// CurrencyIDGt is an autogenerated method
// nolint: dupl
func (qs AccountQuerySet) CurrencyIDGt(currencyID uint) AccountQuerySet {
	return qs.w(qs.db.Where("currency_id > ?", currencyID))
}

// CurrencyIDGte is an autogenerated method
// nolint: dupl
func (qs AccountQuerySet) CurrencyIDGte(currencyID uint) AccountQuerySet {
	return qs.w(qs.db.Where("currency_id >= ?", currencyID))
}

// CurrencyIDIn is an autogenerated method
// nolint: dupl
func (qs AccountQuerySet) CurrencyIDIn(currencyID uint, currencyIDRest ...uint) AccountQuerySet {
	iArgs := []interface{}{currencyID}
	for _, arg := range currencyIDRest {
		iArgs = append(iArgs, arg)
	}
	return qs.w(qs.db.Where("currency_id IN (?)", iArgs))
}

// CurrencyIDLt is an autogenerated method
// nolint: dupl
func (qs AccountQuerySet) CurrencyIDLt(currencyID uint) AccountQuerySet {
	return qs.w(qs.db.Where("currency_id < ?", currencyID))
}

// CurrencyIDLte is an autogenerated method
// nolint: dupl
func (qs AccountQuerySet) CurrencyIDLte(currencyID uint) AccountQuerySet {
	return qs.w(qs.db.Where("currency_id <= ?", currencyID))
}

// CurrencyIDNe is an autogenerated method
// nolint: dupl
func (qs AccountQuerySet) CurrencyIDNe(currencyID uint) AccountQuerySet {
	return qs.w(qs.db.Where("currency_id != ?", currencyID))
}

// CurrencyIDNotIn is an autogenerated method
// nolint: dupl
func (qs AccountQuerySet) CurrencyIDNotIn(currencyID uint, currencyIDRest ...uint) AccountQuerySet {
	iArgs := []interface{}{currencyID}
	for _, arg := range currencyIDRest {
		iArgs = append(iArgs, arg)
	}
	return qs.w(qs.db.Where("currency_id NOT IN (?)", iArgs))
}

// Delete is an autogenerated method
// nolint: dupl
func (qs AccountQuerySet) Delete() error {
	return qs.db.Delete(Account{}).Error
}

// Delete is an autogenerated method
// nolint: dupl
func (o *Account) Delete(db *gorm.DB) error {
	return db.Delete(o).Error
}

// DeletedAtEq is an autogenerated method
// nolint: dupl
func (qs AccountQuerySet) DeletedAtEq(deletedAt time.Time) AccountQuerySet {
	return qs.w(qs.db.Where("deleted_at = ?", deletedAt))
}

// DeletedAtGt is an autogenerated method
// nolint: dupl
func (qs AccountQuerySet) DeletedAtGt(deletedAt time.Time) AccountQuerySet {
	return qs.w(qs.db.Where("deleted_at > ?", deletedAt))
}

// DeletedAtGte is an autogenerated method
// nolint: dupl
func (qs AccountQuerySet) DeletedAtGte(deletedAt time.Time) AccountQuerySet {
	return qs.w(qs.db.Where("deleted_at >= ?", deletedAt))
}

// DeletedAtIsNotNull is an autogenerated method
// nolint: dupl
func (qs AccountQuerySet) DeletedAtIsNotNull() AccountQuerySet {
	return qs.w(qs.db.Where("deleted_at IS NOT NULL"))
}

// DeletedAtIsNull is an autogenerated method
// nolint: dupl
func (qs AccountQuerySet) DeletedAtIsNull() AccountQuerySet {
	return qs.w(qs.db.Where("deleted_at IS NULL"))
}

// DeletedAtLt is an autogenerated method
// nolint: dupl
func (qs AccountQuerySet) DeletedAtLt(deletedAt time.Time) AccountQuerySet {
	return qs.w(qs.db.Where("deleted_at < ?", deletedAt))
}

// DeletedAtLte is an autogenerated method
// nolint: dupl
func (qs AccountQuerySet) DeletedAtLte(deletedAt time.Time) AccountQuerySet {
	return qs.w(qs.db.Where("deleted_at <= ?", deletedAt))
}

// DeletedAtNe is an autogenerated method
// nolint: dupl
func (qs AccountQuerySet) DeletedAtNe(deletedAt time.Time) AccountQuerySet {
	return qs.w(qs.db.Where("deleted_at != ?", deletedAt))
}

// GetUpdater is an autogenerated method
// nolint: dupl
func (qs AccountQuerySet) GetUpdater() AccountUpdater {
	return NewAccountUpdater(qs.db)
}

// IDEq is an autogenerated method
// nolint: dupl
func (qs AccountQuerySet) IDEq(ID uint) AccountQuerySet {
	return qs.w(qs.db.Where("id = ?", ID))
}

// IDGt is an autogenerated method
// nolint: dupl
func (qs AccountQuerySet) IDGt(ID uint) AccountQuerySet {
	return qs.w(qs.db.Where("id > ?", ID))
}

// IDGte is an autogenerated method
// nolint: dupl
func (qs AccountQuerySet) IDGte(ID uint) AccountQuerySet {
	return qs.w(qs.db.Where("id >= ?", ID))
}

// IDIn is an autogenerated method
// nolint: dupl
func (qs AccountQuerySet) IDIn(ID uint, IDRest ...uint) AccountQuerySet {
	iArgs := []interface{}{ID}
	for _, arg := range IDRest {
		iArgs = append(iArgs, arg)
	}
	return qs.w(qs.db.Where("id IN (?)", iArgs))
}

// IDLt is an autogenerated method
// nolint: dupl
func (qs AccountQuerySet) IDLt(ID uint) AccountQuerySet {
	return qs.w(qs.db.Where("id < ?", ID))
}

// IDLte is an autogenerated method
// nolint: dupl
func (qs AccountQuerySet) IDLte(ID uint) AccountQuerySet {
	return qs.w(qs.db.Where("id <= ?", ID))
}

// IDNe is an autogenerated method
// nolint: dupl
func (qs AccountQuerySet) IDNe(ID uint) AccountQuerySet {
	return qs.w(qs.db.Where("id != ?", ID))
}

// IDNotIn is an autogenerated method
// nolint: dupl
func (qs AccountQuerySet) IDNotIn(ID uint, IDRest ...uint) AccountQuerySet {
	iArgs := []interface{}{ID}
	for _, arg := range IDRest {
		iArgs = append(iArgs, arg)
	}
	return qs.w(qs.db.Where("id NOT IN (?)", iArgs))
}

// Limit is an autogenerated method
// nolint: dupl
func (qs AccountQuerySet) Limit(limit int) AccountQuerySet {
	return qs.w(qs.db.Limit(limit))
}

// One is used to retrieve one result. It returns gorm.ErrRecordNotFound
// if nothing was fetched
func (qs AccountQuerySet) One(ret *Account) error {
	return qs.db.First(ret).Error
}

// OrderAscByAmount is an autogenerated method
// nolint: dupl
func (qs AccountQuerySet) OrderAscByAmount() AccountQuerySet {
	return qs.w(qs.db.Order("amount ASC"))
}

// OrderAscByCreatedAt is an autogenerated method
// nolint: dupl
func (qs AccountQuerySet) OrderAscByCreatedAt() AccountQuerySet {
	return qs.w(qs.db.Order("created_at ASC"))
}

// OrderAscByCurrencyID is an autogenerated method
// nolint: dupl
func (qs AccountQuerySet) OrderAscByCurrencyID() AccountQuerySet {
	return qs.w(qs.db.Order("currency_id ASC"))
}

// OrderAscByDeletedAt is an autogenerated method
// nolint: dupl
func (qs AccountQuerySet) OrderAscByDeletedAt() AccountQuerySet {
	return qs.w(qs.db.Order("deleted_at ASC"))
}

// OrderAscByID is an autogenerated method
// nolint: dupl
func (qs AccountQuerySet) OrderAscByID() AccountQuerySet {
	return qs.w(qs.db.Order("id ASC"))
}

// OrderAscByUpdatedAt is an autogenerated method
// nolint: dupl
func (qs AccountQuerySet) OrderAscByUpdatedAt() AccountQuerySet {
	return qs.w(qs.db.Order("updated_at ASC"))
}

// OrderAscByUserID is an autogenerated method
// nolint: dupl
func (qs AccountQuerySet) OrderAscByUserID() AccountQuerySet {
	return qs.w(qs.db.Order("user_id ASC"))
}

// OrderDescByAmount is an autogenerated method
// nolint: dupl
func (qs AccountQuerySet) OrderDescByAmount() AccountQuerySet {
	return qs.w(qs.db.Order("amount DESC"))
}

// OrderDescByCreatedAt is an autogenerated method
// nolint: dupl
func (qs AccountQuerySet) OrderDescByCreatedAt() AccountQuerySet {
	return qs.w(qs.db.Order("created_at DESC"))
}

// OrderDescByCurrencyID is an autogenerated method
// nolint: dupl
func (qs AccountQuerySet) OrderDescByCurrencyID() AccountQuerySet {
	return qs.w(qs.db.Order("currency_id DESC"))
}

// OrderDescByDeletedAt is an autogenerated method
// nolint: dupl
func (qs AccountQuerySet) OrderDescByDeletedAt() AccountQuerySet {
	return qs.w(qs.db.Order("deleted_at DESC"))
}

// OrderDescByID is an autogenerated method
// nolint: dupl
func (qs AccountQuerySet) OrderDescByID() AccountQuerySet {
	return qs.w(qs.db.Order("id DESC"))
}

// OrderDescByUpdatedAt is an autogenerated method
// nolint: dupl
func (qs AccountQuerySet) OrderDescByUpdatedAt() AccountQuerySet {
	return qs.w(qs.db.Order("updated_at DESC"))
}

// OrderDescByUserID is an autogenerated method
// nolint: dupl
func (qs AccountQuerySet) OrderDescByUserID() AccountQuerySet {
	return qs.w(qs.db.Order("user_id DESC"))
}

// RefillWalletIDEq is an autogenerated method
// nolint: dupl
func (qs AccountQuerySet) RefillWalletIDEq(refillWalletID string) AccountQuerySet {
	return qs.w(qs.db.Where("refill_wallet_id = ?", refillWalletID))
}

// RefillWalletIDIn is an autogenerated method
// nolint: dupl
func (qs AccountQuerySet) RefillWalletIDIn(refillWalletID string, refillWalletIDRest ...string) AccountQuerySet {
	iArgs := []interface{}{refillWalletID}
	for _, arg := range refillWalletIDRest {
		iArgs = append(iArgs, arg)
	}
	return qs.w(qs.db.Where("refill_wallet_id IN (?)", iArgs))
}

// RefillWalletIDNe is an autogenerated method
// nolint: dupl
func (qs AccountQuerySet) RefillWalletIDNe(refillWalletID string) AccountQuerySet {
	return qs.w(qs.db.Where("refill_wallet_id != ?", refillWalletID))
}

// RefillWalletIDNotIn is an autogenerated method
// nolint: dupl
func (qs AccountQuerySet) RefillWalletIDNotIn(refillWalletID string, refillWalletIDRest ...string) AccountQuerySet {
	iArgs := []interface{}{refillWalletID}
	for _, arg := range refillWalletIDRest {
		iArgs = append(iArgs, arg)
	}
	return qs.w(qs.db.Where("refill_wallet_id NOT IN (?)", iArgs))
}

// SetAmount is an autogenerated method
// nolint: dupl
func (u AccountUpdater) SetAmount(amount uint) AccountUpdater {
	u.fields[string(AccountDBSchema.Amount)] = amount
	return u
}

// SetCreatedAt is an autogenerated method
// nolint: dupl
func (u AccountUpdater) SetCreatedAt(createdAt time.Time) AccountUpdater {
	u.fields[string(AccountDBSchema.CreatedAt)] = createdAt
	return u
}

// SetCurrencyID is an autogenerated method
// nolint: dupl
func (u AccountUpdater) SetCurrencyID(currencyID uint) AccountUpdater {
	u.fields[string(AccountDBSchema.CurrencyID)] = currencyID
	return u
}

// SetDeletedAt is an autogenerated method
// nolint: dupl
func (u AccountUpdater) SetDeletedAt(deletedAt *time.Time) AccountUpdater {
	u.fields[string(AccountDBSchema.DeletedAt)] = deletedAt
	return u
}

// SetID is an autogenerated method
// nolint: dupl
func (u AccountUpdater) SetID(ID uint) AccountUpdater {
	u.fields[string(AccountDBSchema.ID)] = ID
	return u
}

// SetRefillWalletID is an autogenerated method
// nolint: dupl
func (u AccountUpdater) SetRefillWalletID(refillWalletID string) AccountUpdater {
	u.fields[string(AccountDBSchema.RefillWalletID)] = refillWalletID
	return u
}

// SetUpdatedAt is an autogenerated method
// nolint: dupl
func (u AccountUpdater) SetUpdatedAt(updatedAt time.Time) AccountUpdater {
	u.fields[string(AccountDBSchema.UpdatedAt)] = updatedAt
	return u
}

// SetUserID is an autogenerated method
// nolint: dupl
func (u AccountUpdater) SetUserID(userID uint) AccountUpdater {
	u.fields[string(AccountDBSchema.UserID)] = userID
	return u
}

// SetWithdrawWalletID is an autogenerated method
// nolint: dupl
func (u AccountUpdater) SetWithdrawWalletID(withdrawWalletID string) AccountUpdater {
	u.fields[string(AccountDBSchema.WithdrawWalletID)] = withdrawWalletID
	return u
}

// Update is an autogenerated method
// nolint: dupl
func (u AccountUpdater) Update() error {
	return u.db.Updates(u.fields).Error
}

// UpdateNum is an autogenerated method
// nolint: dupl
func (u AccountUpdater) UpdateNum() (int64, error) {
	db := u.db.Updates(u.fields)
	return db.RowsAffected, db.Error
}

// UpdatedAtEq is an autogenerated method
// nolint: dupl
func (qs AccountQuerySet) UpdatedAtEq(updatedAt time.Time) AccountQuerySet {
	return qs.w(qs.db.Where("updated_at = ?", updatedAt))
}

// UpdatedAtGt is an autogenerated method
// nolint: dupl
func (qs AccountQuerySet) UpdatedAtGt(updatedAt time.Time) AccountQuerySet {
	return qs.w(qs.db.Where("updated_at > ?", updatedAt))
}

// UpdatedAtGte is an autogenerated method
// nolint: dupl
func (qs AccountQuerySet) UpdatedAtGte(updatedAt time.Time) AccountQuerySet {
	return qs.w(qs.db.Where("updated_at >= ?", updatedAt))
}

// UpdatedAtLt is an autogenerated method
// nolint: dupl
func (qs AccountQuerySet) UpdatedAtLt(updatedAt time.Time) AccountQuerySet {
	return qs.w(qs.db.Where("updated_at < ?", updatedAt))
}

// UpdatedAtLte is an autogenerated method
// nolint: dupl
func (qs AccountQuerySet) UpdatedAtLte(updatedAt time.Time) AccountQuerySet {
	return qs.w(qs.db.Where("updated_at <= ?", updatedAt))
}

// UpdatedAtNe is an autogenerated method
// nolint: dupl
func (qs AccountQuerySet) UpdatedAtNe(updatedAt time.Time) AccountQuerySet {
	return qs.w(qs.db.Where("updated_at != ?", updatedAt))
}

// UserIDEq is an autogenerated method
// nolint: dupl
func (qs AccountQuerySet) UserIDEq(userID uint) AccountQuerySet {
	return qs.w(qs.db.Where("user_id = ?", userID))
}

// UserIDGt is an autogenerated method
// nolint: dupl
func (qs AccountQuerySet) UserIDGt(userID uint) AccountQuerySet {
	return qs.w(qs.db.Where("user_id > ?", userID))
}

// UserIDGte is an autogenerated method
// nolint: dupl
func (qs AccountQuerySet) UserIDGte(userID uint) AccountQuerySet {
	return qs.w(qs.db.Where("user_id >= ?", userID))
}

// UserIDIn is an autogenerated method
// nolint: dupl
func (qs AccountQuerySet) UserIDIn(userID uint, userIDRest ...uint) AccountQuerySet {
	iArgs := []interface{}{userID}
	for _, arg := range userIDRest {
		iArgs = append(iArgs, arg)
	}
	return qs.w(qs.db.Where("user_id IN (?)", iArgs))
}

// UserIDLt is an autogenerated method
// nolint: dupl
func (qs AccountQuerySet) UserIDLt(userID uint) AccountQuerySet {
	return qs.w(qs.db.Where("user_id < ?", userID))
}

// UserIDLte is an autogenerated method
// nolint: dupl
func (qs AccountQuerySet) UserIDLte(userID uint) AccountQuerySet {
	return qs.w(qs.db.Where("user_id <= ?", userID))
}

// UserIDNe is an autogenerated method
// nolint: dupl
func (qs AccountQuerySet) UserIDNe(userID uint) AccountQuerySet {
	return qs.w(qs.db.Where("user_id != ?", userID))
}

// UserIDNotIn is an autogenerated method
// nolint: dupl
func (qs AccountQuerySet) UserIDNotIn(userID uint, userIDRest ...uint) AccountQuerySet {
	iArgs := []interface{}{userID}
	for _, arg := range userIDRest {
		iArgs = append(iArgs, arg)
	}
	return qs.w(qs.db.Where("user_id NOT IN (?)", iArgs))
}

// WithdrawWalletIDEq is an autogenerated method
// nolint: dupl
func (qs AccountQuerySet) WithdrawWalletIDEq(withdrawWalletID string) AccountQuerySet {
	return qs.w(qs.db.Where("withdraw_wallet_id = ?", withdrawWalletID))
}

// WithdrawWalletIDIn is an autogenerated method
// nolint: dupl
func (qs AccountQuerySet) WithdrawWalletIDIn(withdrawWalletID string, withdrawWalletIDRest ...string) AccountQuerySet {
	iArgs := []interface{}{withdrawWalletID}
	for _, arg := range withdrawWalletIDRest {
		iArgs = append(iArgs, arg)
	}
	return qs.w(qs.db.Where("withdraw_wallet_id IN (?)", iArgs))
}

// WithdrawWalletIDNe is an autogenerated method
// nolint: dupl
func (qs AccountQuerySet) WithdrawWalletIDNe(withdrawWalletID string) AccountQuerySet {
	return qs.w(qs.db.Where("withdraw_wallet_id != ?", withdrawWalletID))
}

// WithdrawWalletIDNotIn is an autogenerated method
// nolint: dupl
func (qs AccountQuerySet) WithdrawWalletIDNotIn(withdrawWalletID string, withdrawWalletIDRest ...string) AccountQuerySet {
	iArgs := []interface{}{withdrawWalletID}
	for _, arg := range withdrawWalletIDRest {
		iArgs = append(iArgs, arg)
	}
	return qs.w(qs.db.Where("withdraw_wallet_id NOT IN (?)", iArgs))
}

// ===== END of query set AccountQuerySet

// ===== BEGIN of Account modifiers

type accountDBSchemaField string

func (f accountDBSchemaField) String() string {
	return string(f)
}

// AccountDBSchema stores db field names of Account
var AccountDBSchema = struct {
	ID               accountDBSchemaField
	CreatedAt        accountDBSchemaField
	UpdatedAt        accountDBSchemaField
	DeletedAt        accountDBSchemaField
	CurrencyID       accountDBSchemaField
	UserID           accountDBSchemaField
	Amount           accountDBSchemaField
	WithdrawWalletID accountDBSchemaField
	RefillWalletID   accountDBSchemaField
}{

	ID:               accountDBSchemaField("id"),
	CreatedAt:        accountDBSchemaField("created_at"),
	UpdatedAt:        accountDBSchemaField("updated_at"),
	DeletedAt:        accountDBSchemaField("deleted_at"),
	CurrencyID:       accountDBSchemaField("currency_id"),
	UserID:           accountDBSchemaField("user_id"),
	Amount:           accountDBSchemaField("amount"),
	WithdrawWalletID: accountDBSchemaField("withdraw_wallet_id"),
	RefillWalletID:   accountDBSchemaField("refill_wallet_id"),
}

// Update updates Account fields by primary key
func (o *Account) Update(db *gorm.DB, fields ...accountDBSchemaField) error {
	dbNameToFieldName := map[string]interface{}{
		"id":                 o.ID,
		"created_at":         o.CreatedAt,
		"updated_at":         o.UpdatedAt,
		"deleted_at":         o.DeletedAt,
		"currency_id":        o.CurrencyID,
		"user_id":            o.UserID,
		"amount":             o.Amount,
		"withdraw_wallet_id": o.WithdrawWalletID,
		"refill_wallet_id":   o.RefillWalletID,
	}
	u := map[string]interface{}{}
	for _, f := range fields {
		fs := f.String()
		u[fs] = dbNameToFieldName[fs]
	}
	if err := db.Model(o).Updates(u).Error; err != nil {
		if err == gorm.ErrRecordNotFound {
			return err
		}

		return fmt.Errorf("can't update Account %v fields %v: %s",
			o, fields, err)
	}

	return nil
}

// AccountUpdater is an Account updates manager
type AccountUpdater struct {
	fields map[string]interface{}
	db     *gorm.DB
}

// NewAccountUpdater creates new Account updater
func NewAccountUpdater(db *gorm.DB) AccountUpdater {
	return AccountUpdater{
		fields: map[string]interface{}{},
		db:     db.Model(&Account{}),
	}
}

// ===== END of Account modifiers

// ===== END of all query sets
