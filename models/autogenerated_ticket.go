package models

import (
	"fmt"
	"time"

	"github.com/jinzhu/gorm"
)

// ===== BEGIN of all query sets

// ===== BEGIN of query set MessageQuerySet

// MessageQuerySet is an queryset type for Message
type MessageQuerySet struct {
	db *gorm.DB
}

// NewMessageQuerySet constructs new MessageQuerySet
func NewMessageQuerySet(db *gorm.DB) MessageQuerySet {
	return MessageQuerySet{
		db: db.Model(&Message{}),
	}
}

func (qs MessageQuerySet) w(db *gorm.DB) MessageQuerySet {
	return NewMessageQuerySet(db)
}

// All is an autogenerated method
// nolint: dupl
func (qs MessageQuerySet) All(ret *[]Message) error {
	return qs.db.Find(ret).Error
}

// BodyEq is an autogenerated method
// nolint: dupl
func (qs MessageQuerySet) BodyEq(body string) MessageQuerySet {
	return qs.w(qs.db.Where("body = ?", body))
}

// BodyIn is an autogenerated method
// nolint: dupl
func (qs MessageQuerySet) BodyIn(body string, bodyRest ...string) MessageQuerySet {
	iArgs := []interface{}{body}
	for _, arg := range bodyRest {
		iArgs = append(iArgs, arg)
	}
	return qs.w(qs.db.Where("body IN (?)", iArgs))
}

// BodyNe is an autogenerated method
// nolint: dupl
func (qs MessageQuerySet) BodyNe(body string) MessageQuerySet {
	return qs.w(qs.db.Where("body != ?", body))
}

// BodyNotIn is an autogenerated method
// nolint: dupl
func (qs MessageQuerySet) BodyNotIn(body string, bodyRest ...string) MessageQuerySet {
	iArgs := []interface{}{body}
	for _, arg := range bodyRest {
		iArgs = append(iArgs, arg)
	}
	return qs.w(qs.db.Where("body NOT IN (?)", iArgs))
}

// Count is an autogenerated method
// nolint: dupl
func (qs MessageQuerySet) Count() (int, error) {
	var count int
	err := qs.db.Count(&count).Error
	return count, err
}

// Create is an autogenerated method
// nolint: dupl
func (o *Message) Create(db *gorm.DB) error {
	return db.Create(o).Error
}

// CreatedAtEq is an autogenerated method
// nolint: dupl
func (qs MessageQuerySet) CreatedAtEq(createdAt time.Time) MessageQuerySet {
	return qs.w(qs.db.Where("created_at = ?", createdAt))
}

// CreatedAtGt is an autogenerated method
// nolint: dupl
func (qs MessageQuerySet) CreatedAtGt(createdAt time.Time) MessageQuerySet {
	return qs.w(qs.db.Where("created_at > ?", createdAt))
}

// CreatedAtGte is an autogenerated method
// nolint: dupl
func (qs MessageQuerySet) CreatedAtGte(createdAt time.Time) MessageQuerySet {
	return qs.w(qs.db.Where("created_at >= ?", createdAt))
}

// CreatedAtLt is an autogenerated method
// nolint: dupl
func (qs MessageQuerySet) CreatedAtLt(createdAt time.Time) MessageQuerySet {
	return qs.w(qs.db.Where("created_at < ?", createdAt))
}

// CreatedAtLte is an autogenerated method
// nolint: dupl
func (qs MessageQuerySet) CreatedAtLte(createdAt time.Time) MessageQuerySet {
	return qs.w(qs.db.Where("created_at <= ?", createdAt))
}

// CreatedAtNe is an autogenerated method
// nolint: dupl
func (qs MessageQuerySet) CreatedAtNe(createdAt time.Time) MessageQuerySet {
	return qs.w(qs.db.Where("created_at != ?", createdAt))
}

// Delete is an autogenerated method
// nolint: dupl
func (o *Message) Delete(db *gorm.DB) error {
	return db.Delete(o).Error
}

// Delete is an autogenerated method
// nolint: dupl
func (qs MessageQuerySet) Delete() error {
	return qs.db.Delete(Message{}).Error
}

// DeletedAtEq is an autogenerated method
// nolint: dupl
func (qs MessageQuerySet) DeletedAtEq(deletedAt time.Time) MessageQuerySet {
	return qs.w(qs.db.Where("deleted_at = ?", deletedAt))
}

// DeletedAtGt is an autogenerated method
// nolint: dupl
func (qs MessageQuerySet) DeletedAtGt(deletedAt time.Time) MessageQuerySet {
	return qs.w(qs.db.Where("deleted_at > ?", deletedAt))
}

// DeletedAtGte is an autogenerated method
// nolint: dupl
func (qs MessageQuerySet) DeletedAtGte(deletedAt time.Time) MessageQuerySet {
	return qs.w(qs.db.Where("deleted_at >= ?", deletedAt))
}

// DeletedAtIsNotNull is an autogenerated method
// nolint: dupl
func (qs MessageQuerySet) DeletedAtIsNotNull() MessageQuerySet {
	return qs.w(qs.db.Where("deleted_at IS NOT NULL"))
}

// DeletedAtIsNull is an autogenerated method
// nolint: dupl
func (qs MessageQuerySet) DeletedAtIsNull() MessageQuerySet {
	return qs.w(qs.db.Where("deleted_at IS NULL"))
}

// DeletedAtLt is an autogenerated method
// nolint: dupl
func (qs MessageQuerySet) DeletedAtLt(deletedAt time.Time) MessageQuerySet {
	return qs.w(qs.db.Where("deleted_at < ?", deletedAt))
}

// DeletedAtLte is an autogenerated method
// nolint: dupl
func (qs MessageQuerySet) DeletedAtLte(deletedAt time.Time) MessageQuerySet {
	return qs.w(qs.db.Where("deleted_at <= ?", deletedAt))
}

// DeletedAtNe is an autogenerated method
// nolint: dupl
func (qs MessageQuerySet) DeletedAtNe(deletedAt time.Time) MessageQuerySet {
	return qs.w(qs.db.Where("deleted_at != ?", deletedAt))
}

// GetUpdater is an autogenerated method
// nolint: dupl
func (qs MessageQuerySet) GetUpdater() MessageUpdater {
	return NewMessageUpdater(qs.db)
}

// IDEq is an autogenerated method
// nolint: dupl
func (qs MessageQuerySet) IDEq(ID uint) MessageQuerySet {
	return qs.w(qs.db.Where("id = ?", ID))
}

// IDGt is an autogenerated method
// nolint: dupl
func (qs MessageQuerySet) IDGt(ID uint) MessageQuerySet {
	return qs.w(qs.db.Where("id > ?", ID))
}

// IDGte is an autogenerated method
// nolint: dupl
func (qs MessageQuerySet) IDGte(ID uint) MessageQuerySet {
	return qs.w(qs.db.Where("id >= ?", ID))
}

// IDIn is an autogenerated method
// nolint: dupl
func (qs MessageQuerySet) IDIn(ID uint, IDRest ...uint) MessageQuerySet {
	iArgs := []interface{}{ID}
	for _, arg := range IDRest {
		iArgs = append(iArgs, arg)
	}
	return qs.w(qs.db.Where("id IN (?)", iArgs))
}

// IDLt is an autogenerated method
// nolint: dupl
func (qs MessageQuerySet) IDLt(ID uint) MessageQuerySet {
	return qs.w(qs.db.Where("id < ?", ID))
}

// IDLte is an autogenerated method
// nolint: dupl
func (qs MessageQuerySet) IDLte(ID uint) MessageQuerySet {
	return qs.w(qs.db.Where("id <= ?", ID))
}

// IDNe is an autogenerated method
// nolint: dupl
func (qs MessageQuerySet) IDNe(ID uint) MessageQuerySet {
	return qs.w(qs.db.Where("id != ?", ID))
}

// IDNotIn is an autogenerated method
// nolint: dupl
func (qs MessageQuerySet) IDNotIn(ID uint, IDRest ...uint) MessageQuerySet {
	iArgs := []interface{}{ID}
	for _, arg := range IDRest {
		iArgs = append(iArgs, arg)
	}
	return qs.w(qs.db.Where("id NOT IN (?)", iArgs))
}

// Limit is an autogenerated method
// nolint: dupl
func (qs MessageQuerySet) Limit(limit int) MessageQuerySet {
	return qs.w(qs.db.Limit(limit))
}

// One is used to retrieve one result. It returns gorm.ErrRecordNotFound
// if nothing was fetched
func (qs MessageQuerySet) One(ret *Message) error {
	return qs.db.First(ret).Error
}

// OrderAscByCreatedAt is an autogenerated method
// nolint: dupl
func (qs MessageQuerySet) OrderAscByCreatedAt() MessageQuerySet {
	return qs.w(qs.db.Order("created_at ASC"))
}

// OrderAscByDeletedAt is an autogenerated method
// nolint: dupl
func (qs MessageQuerySet) OrderAscByDeletedAt() MessageQuerySet {
	return qs.w(qs.db.Order("deleted_at ASC"))
}

// OrderAscByID is an autogenerated method
// nolint: dupl
func (qs MessageQuerySet) OrderAscByID() MessageQuerySet {
	return qs.w(qs.db.Order("id ASC"))
}

// OrderAscByOwnerID is an autogenerated method
// nolint: dupl
func (qs MessageQuerySet) OrderAscByOwnerID() MessageQuerySet {
	return qs.w(qs.db.Order("owner_id ASC"))
}

// OrderAscByTicketID is an autogenerated method
// nolint: dupl
func (qs MessageQuerySet) OrderAscByTicketID() MessageQuerySet {
	return qs.w(qs.db.Order("ticket_id ASC"))
}

// OrderAscByUpdatedAt is an autogenerated method
// nolint: dupl
func (qs MessageQuerySet) OrderAscByUpdatedAt() MessageQuerySet {
	return qs.w(qs.db.Order("updated_at ASC"))
}

// OrderDescByCreatedAt is an autogenerated method
// nolint: dupl
func (qs MessageQuerySet) OrderDescByCreatedAt() MessageQuerySet {
	return qs.w(qs.db.Order("created_at DESC"))
}

// OrderDescByDeletedAt is an autogenerated method
// nolint: dupl
func (qs MessageQuerySet) OrderDescByDeletedAt() MessageQuerySet {
	return qs.w(qs.db.Order("deleted_at DESC"))
}

// OrderDescByID is an autogenerated method
// nolint: dupl
func (qs MessageQuerySet) OrderDescByID() MessageQuerySet {
	return qs.w(qs.db.Order("id DESC"))
}

// OrderDescByOwnerID is an autogenerated method
// nolint: dupl
func (qs MessageQuerySet) OrderDescByOwnerID() MessageQuerySet {
	return qs.w(qs.db.Order("owner_id DESC"))
}

// OrderDescByTicketID is an autogenerated method
// nolint: dupl
func (qs MessageQuerySet) OrderDescByTicketID() MessageQuerySet {
	return qs.w(qs.db.Order("ticket_id DESC"))
}

// OrderDescByUpdatedAt is an autogenerated method
// nolint: dupl
func (qs MessageQuerySet) OrderDescByUpdatedAt() MessageQuerySet {
	return qs.w(qs.db.Order("updated_at DESC"))
}

// OwnerIDEq is an autogenerated method
// nolint: dupl
func (qs MessageQuerySet) OwnerIDEq(ownerID uint) MessageQuerySet {
	return qs.w(qs.db.Where("owner_id = ?", ownerID))
}

// OwnerIDGt is an autogenerated method
// nolint: dupl
func (qs MessageQuerySet) OwnerIDGt(ownerID uint) MessageQuerySet {
	return qs.w(qs.db.Where("owner_id > ?", ownerID))
}

// OwnerIDGte is an autogenerated method
// nolint: dupl
func (qs MessageQuerySet) OwnerIDGte(ownerID uint) MessageQuerySet {
	return qs.w(qs.db.Where("owner_id >= ?", ownerID))
}

// OwnerIDIn is an autogenerated method
// nolint: dupl
func (qs MessageQuerySet) OwnerIDIn(ownerID uint, ownerIDRest ...uint) MessageQuerySet {
	iArgs := []interface{}{ownerID}
	for _, arg := range ownerIDRest {
		iArgs = append(iArgs, arg)
	}
	return qs.w(qs.db.Where("owner_id IN (?)", iArgs))
}

// OwnerIDLt is an autogenerated method
// nolint: dupl
func (qs MessageQuerySet) OwnerIDLt(ownerID uint) MessageQuerySet {
	return qs.w(qs.db.Where("owner_id < ?", ownerID))
}

// OwnerIDLte is an autogenerated method
// nolint: dupl
func (qs MessageQuerySet) OwnerIDLte(ownerID uint) MessageQuerySet {
	return qs.w(qs.db.Where("owner_id <= ?", ownerID))
}

// OwnerIDNe is an autogenerated method
// nolint: dupl
func (qs MessageQuerySet) OwnerIDNe(ownerID uint) MessageQuerySet {
	return qs.w(qs.db.Where("owner_id != ?", ownerID))
}

// OwnerIDNotIn is an autogenerated method
// nolint: dupl
func (qs MessageQuerySet) OwnerIDNotIn(ownerID uint, ownerIDRest ...uint) MessageQuerySet {
	iArgs := []interface{}{ownerID}
	for _, arg := range ownerIDRest {
		iArgs = append(iArgs, arg)
	}
	return qs.w(qs.db.Where("owner_id NOT IN (?)", iArgs))
}

// SetBody is an autogenerated method
// nolint: dupl
func (u MessageUpdater) SetBody(body string) MessageUpdater {
	u.fields[string(MessageDBSchema.Body)] = body
	return u
}

// SetCreatedAt is an autogenerated method
// nolint: dupl
func (u MessageUpdater) SetCreatedAt(createdAt time.Time) MessageUpdater {
	u.fields[string(MessageDBSchema.CreatedAt)] = createdAt
	return u
}

// SetDeletedAt is an autogenerated method
// nolint: dupl
func (u MessageUpdater) SetDeletedAt(deletedAt *time.Time) MessageUpdater {
	u.fields[string(MessageDBSchema.DeletedAt)] = deletedAt
	return u
}

// SetID is an autogenerated method
// nolint: dupl
func (u MessageUpdater) SetID(ID uint) MessageUpdater {
	u.fields[string(MessageDBSchema.ID)] = ID
	return u
}

// SetOwnerID is an autogenerated method
// nolint: dupl
func (u MessageUpdater) SetOwnerID(ownerID uint) MessageUpdater {
	u.fields[string(MessageDBSchema.OwnerID)] = ownerID
	return u
}

// SetTicketID is an autogenerated method
// nolint: dupl
func (u MessageUpdater) SetTicketID(ticketID uint) MessageUpdater {
	u.fields[string(MessageDBSchema.TicketID)] = ticketID
	return u
}

// SetUpdatedAt is an autogenerated method
// nolint: dupl
func (u MessageUpdater) SetUpdatedAt(updatedAt time.Time) MessageUpdater {
	u.fields[string(MessageDBSchema.UpdatedAt)] = updatedAt
	return u
}

// TicketIDEq is an autogenerated method
// nolint: dupl
func (qs MessageQuerySet) TicketIDEq(ticketID uint) MessageQuerySet {
	return qs.w(qs.db.Where("ticket_id = ?", ticketID))
}

// TicketIDGt is an autogenerated method
// nolint: dupl
func (qs MessageQuerySet) TicketIDGt(ticketID uint) MessageQuerySet {
	return qs.w(qs.db.Where("ticket_id > ?", ticketID))
}

// TicketIDGte is an autogenerated method
// nolint: dupl
func (qs MessageQuerySet) TicketIDGte(ticketID uint) MessageQuerySet {
	return qs.w(qs.db.Where("ticket_id >= ?", ticketID))
}

// TicketIDIn is an autogenerated method
// nolint: dupl
func (qs MessageQuerySet) TicketIDIn(ticketID uint, ticketIDRest ...uint) MessageQuerySet {
	iArgs := []interface{}{ticketID}
	for _, arg := range ticketIDRest {
		iArgs = append(iArgs, arg)
	}
	return qs.w(qs.db.Where("ticket_id IN (?)", iArgs))
}

// TicketIDLt is an autogenerated method
// nolint: dupl
func (qs MessageQuerySet) TicketIDLt(ticketID uint) MessageQuerySet {
	return qs.w(qs.db.Where("ticket_id < ?", ticketID))
}

// TicketIDLte is an autogenerated method
// nolint: dupl
func (qs MessageQuerySet) TicketIDLte(ticketID uint) MessageQuerySet {
	return qs.w(qs.db.Where("ticket_id <= ?", ticketID))
}

// TicketIDNe is an autogenerated method
// nolint: dupl
func (qs MessageQuerySet) TicketIDNe(ticketID uint) MessageQuerySet {
	return qs.w(qs.db.Where("ticket_id != ?", ticketID))
}

// TicketIDNotIn is an autogenerated method
// nolint: dupl
func (qs MessageQuerySet) TicketIDNotIn(ticketID uint, ticketIDRest ...uint) MessageQuerySet {
	iArgs := []interface{}{ticketID}
	for _, arg := range ticketIDRest {
		iArgs = append(iArgs, arg)
	}
	return qs.w(qs.db.Where("ticket_id NOT IN (?)", iArgs))
}

// Update is an autogenerated method
// nolint: dupl
func (u MessageUpdater) Update() error {
	return u.db.Updates(u.fields).Error
}

// UpdateNum is an autogenerated method
// nolint: dupl
func (u MessageUpdater) UpdateNum() (int64, error) {
	db := u.db.Updates(u.fields)
	return db.RowsAffected, db.Error
}

// UpdatedAtEq is an autogenerated method
// nolint: dupl
func (qs MessageQuerySet) UpdatedAtEq(updatedAt time.Time) MessageQuerySet {
	return qs.w(qs.db.Where("updated_at = ?", updatedAt))
}

// UpdatedAtGt is an autogenerated method
// nolint: dupl
func (qs MessageQuerySet) UpdatedAtGt(updatedAt time.Time) MessageQuerySet {
	return qs.w(qs.db.Where("updated_at > ?", updatedAt))
}

// UpdatedAtGte is an autogenerated method
// nolint: dupl
func (qs MessageQuerySet) UpdatedAtGte(updatedAt time.Time) MessageQuerySet {
	return qs.w(qs.db.Where("updated_at >= ?", updatedAt))
}

// UpdatedAtLt is an autogenerated method
// nolint: dupl
func (qs MessageQuerySet) UpdatedAtLt(updatedAt time.Time) MessageQuerySet {
	return qs.w(qs.db.Where("updated_at < ?", updatedAt))
}

// UpdatedAtLte is an autogenerated method
// nolint: dupl
func (qs MessageQuerySet) UpdatedAtLte(updatedAt time.Time) MessageQuerySet {
	return qs.w(qs.db.Where("updated_at <= ?", updatedAt))
}

// UpdatedAtNe is an autogenerated method
// nolint: dupl
func (qs MessageQuerySet) UpdatedAtNe(updatedAt time.Time) MessageQuerySet {
	return qs.w(qs.db.Where("updated_at != ?", updatedAt))
}

// ===== END of query set MessageQuerySet

// ===== BEGIN of Message modifiers

type messageDBSchemaField string

func (f messageDBSchemaField) String() string {
	return string(f)
}

// MessageDBSchema stores db field names of Message
var MessageDBSchema = struct {
	ID        messageDBSchemaField
	CreatedAt messageDBSchemaField
	UpdatedAt messageDBSchemaField
	DeletedAt messageDBSchemaField
	TicketID  messageDBSchemaField
	Body      messageDBSchemaField
	OwnerID   messageDBSchemaField
}{

	ID:        messageDBSchemaField("id"),
	CreatedAt: messageDBSchemaField("created_at"),
	UpdatedAt: messageDBSchemaField("updated_at"),
	DeletedAt: messageDBSchemaField("deleted_at"),
	TicketID:  messageDBSchemaField("ticket_id"),
	Body:      messageDBSchemaField("body"),
	OwnerID:   messageDBSchemaField("owner_id"),
}

// Update updates Message fields by primary key
func (o *Message) Update(db *gorm.DB, fields ...messageDBSchemaField) error {
	dbNameToFieldName := map[string]interface{}{
		"id":         o.ID,
		"created_at": o.CreatedAt,
		"updated_at": o.UpdatedAt,
		"deleted_at": o.DeletedAt,
		"ticket_id":  o.TicketID,
		"body":       o.Body,
		"owner_id":   o.OwnerID,
	}
	u := map[string]interface{}{}
	for _, f := range fields {
		fs := f.String()
		u[fs] = dbNameToFieldName[fs]
	}
	if err := db.Model(o).Updates(u).Error; err != nil {
		if err == gorm.ErrRecordNotFound {
			return err
		}

		return fmt.Errorf("can't update Message %v fields %v: %s",
			o, fields, err)
	}

	return nil
}

// MessageUpdater is an Message updates manager
type MessageUpdater struct {
	fields map[string]interface{}
	db     *gorm.DB
}

// NewMessageUpdater creates new Message updater
func NewMessageUpdater(db *gorm.DB) MessageUpdater {
	return MessageUpdater{
		fields: map[string]interface{}{},
		db:     db.Model(&Message{}),
	}
}

// ===== END of Message modifiers

// ===== BEGIN of query set TicketQuerySet

// TicketQuerySet is an queryset type for Ticket
type TicketQuerySet struct {
	db *gorm.DB
}

// NewTicketQuerySet constructs new TicketQuerySet
func NewTicketQuerySet(db *gorm.DB) TicketQuerySet {
	return TicketQuerySet{
		db: db.Model(&Ticket{}),
	}
}

func (qs TicketQuerySet) w(db *gorm.DB) TicketQuerySet {
	return NewTicketQuerySet(db)
}

// All is an autogenerated method
// nolint: dupl
func (qs TicketQuerySet) All(ret *[]Ticket) error {
	return qs.db.Find(ret).Error
}

// CategoryEq is an autogenerated method
// nolint: dupl
func (qs TicketQuerySet) CategoryEq(category uint) TicketQuerySet {
	return qs.w(qs.db.Where("category = ?", category))
}

// CategoryGt is an autogenerated method
// nolint: dupl
func (qs TicketQuerySet) CategoryGt(category uint) TicketQuerySet {
	return qs.w(qs.db.Where("category > ?", category))
}

// CategoryGte is an autogenerated method
// nolint: dupl
func (qs TicketQuerySet) CategoryGte(category uint) TicketQuerySet {
	return qs.w(qs.db.Where("category >= ?", category))
}

// CategoryIn is an autogenerated method
// nolint: dupl
func (qs TicketQuerySet) CategoryIn(category uint, categoryRest ...uint) TicketQuerySet {
	iArgs := []interface{}{category}
	for _, arg := range categoryRest {
		iArgs = append(iArgs, arg)
	}
	return qs.w(qs.db.Where("category IN (?)", iArgs))
}

// CategoryLt is an autogenerated method
// nolint: dupl
func (qs TicketQuerySet) CategoryLt(category uint) TicketQuerySet {
	return qs.w(qs.db.Where("category < ?", category))
}

// CategoryLte is an autogenerated method
// nolint: dupl
func (qs TicketQuerySet) CategoryLte(category uint) TicketQuerySet {
	return qs.w(qs.db.Where("category <= ?", category))
}

// CategoryNe is an autogenerated method
// nolint: dupl
func (qs TicketQuerySet) CategoryNe(category uint) TicketQuerySet {
	return qs.w(qs.db.Where("category != ?", category))
}

// CategoryNotIn is an autogenerated method
// nolint: dupl
func (qs TicketQuerySet) CategoryNotIn(category uint, categoryRest ...uint) TicketQuerySet {
	iArgs := []interface{}{category}
	for _, arg := range categoryRest {
		iArgs = append(iArgs, arg)
	}
	return qs.w(qs.db.Where("category NOT IN (?)", iArgs))
}

// Count is an autogenerated method
// nolint: dupl
func (qs TicketQuerySet) Count() (int, error) {
	var count int
	err := qs.db.Count(&count).Error
	return count, err
}

// Create is an autogenerated method
// nolint: dupl
func (o *Ticket) Create(db *gorm.DB) error {
	return db.Create(o).Error
}

// CreatedAtEq is an autogenerated method
// nolint: dupl
func (qs TicketQuerySet) CreatedAtEq(createdAt time.Time) TicketQuerySet {
	return qs.w(qs.db.Where("created_at = ?", createdAt))
}

// CreatedAtGt is an autogenerated method
// nolint: dupl
func (qs TicketQuerySet) CreatedAtGt(createdAt time.Time) TicketQuerySet {
	return qs.w(qs.db.Where("created_at > ?", createdAt))
}

// CreatedAtGte is an autogenerated method
// nolint: dupl
func (qs TicketQuerySet) CreatedAtGte(createdAt time.Time) TicketQuerySet {
	return qs.w(qs.db.Where("created_at >= ?", createdAt))
}

// CreatedAtLt is an autogenerated method
// nolint: dupl
func (qs TicketQuerySet) CreatedAtLt(createdAt time.Time) TicketQuerySet {
	return qs.w(qs.db.Where("created_at < ?", createdAt))
}

// CreatedAtLte is an autogenerated method
// nolint: dupl
func (qs TicketQuerySet) CreatedAtLte(createdAt time.Time) TicketQuerySet {
	return qs.w(qs.db.Where("created_at <= ?", createdAt))
}

// CreatedAtNe is an autogenerated method
// nolint: dupl
func (qs TicketQuerySet) CreatedAtNe(createdAt time.Time) TicketQuerySet {
	return qs.w(qs.db.Where("created_at != ?", createdAt))
}

// Delete is an autogenerated method
// nolint: dupl
func (o *Ticket) Delete(db *gorm.DB) error {
	return db.Delete(o).Error
}

// Delete is an autogenerated method
// nolint: dupl
func (qs TicketQuerySet) Delete() error {
	return qs.db.Delete(Ticket{}).Error
}

// DeletedAtEq is an autogenerated method
// nolint: dupl
func (qs TicketQuerySet) DeletedAtEq(deletedAt time.Time) TicketQuerySet {
	return qs.w(qs.db.Where("deleted_at = ?", deletedAt))
}

// DeletedAtGt is an autogenerated method
// nolint: dupl
func (qs TicketQuerySet) DeletedAtGt(deletedAt time.Time) TicketQuerySet {
	return qs.w(qs.db.Where("deleted_at > ?", deletedAt))
}

// DeletedAtGte is an autogenerated method
// nolint: dupl
func (qs TicketQuerySet) DeletedAtGte(deletedAt time.Time) TicketQuerySet {
	return qs.w(qs.db.Where("deleted_at >= ?", deletedAt))
}

// DeletedAtIsNotNull is an autogenerated method
// nolint: dupl
func (qs TicketQuerySet) DeletedAtIsNotNull() TicketQuerySet {
	return qs.w(qs.db.Where("deleted_at IS NOT NULL"))
}

// DeletedAtIsNull is an autogenerated method
// nolint: dupl
func (qs TicketQuerySet) DeletedAtIsNull() TicketQuerySet {
	return qs.w(qs.db.Where("deleted_at IS NULL"))
}

// DeletedAtLt is an autogenerated method
// nolint: dupl
func (qs TicketQuerySet) DeletedAtLt(deletedAt time.Time) TicketQuerySet {
	return qs.w(qs.db.Where("deleted_at < ?", deletedAt))
}

// DeletedAtLte is an autogenerated method
// nolint: dupl
func (qs TicketQuerySet) DeletedAtLte(deletedAt time.Time) TicketQuerySet {
	return qs.w(qs.db.Where("deleted_at <= ?", deletedAt))
}

// DeletedAtNe is an autogenerated method
// nolint: dupl
func (qs TicketQuerySet) DeletedAtNe(deletedAt time.Time) TicketQuerySet {
	return qs.w(qs.db.Where("deleted_at != ?", deletedAt))
}

// EmailEq is an autogenerated method
// nolint: dupl
func (qs TicketQuerySet) EmailEq(email string) TicketQuerySet {
	return qs.w(qs.db.Where("email = ?", email))
}

// EmailIn is an autogenerated method
// nolint: dupl
func (qs TicketQuerySet) EmailIn(email string, emailRest ...string) TicketQuerySet {
	iArgs := []interface{}{email}
	for _, arg := range emailRest {
		iArgs = append(iArgs, arg)
	}
	return qs.w(qs.db.Where("email IN (?)", iArgs))
}

// EmailNe is an autogenerated method
// nolint: dupl
func (qs TicketQuerySet) EmailNe(email string) TicketQuerySet {
	return qs.w(qs.db.Where("email != ?", email))
}

// EmailNotIn is an autogenerated method
// nolint: dupl
func (qs TicketQuerySet) EmailNotIn(email string, emailRest ...string) TicketQuerySet {
	iArgs := []interface{}{email}
	for _, arg := range emailRest {
		iArgs = append(iArgs, arg)
	}
	return qs.w(qs.db.Where("email NOT IN (?)", iArgs))
}

// GetUpdater is an autogenerated method
// nolint: dupl
func (qs TicketQuerySet) GetUpdater() TicketUpdater {
	return NewTicketUpdater(qs.db)
}

// IDEq is an autogenerated method
// nolint: dupl
func (qs TicketQuerySet) IDEq(ID uint) TicketQuerySet {
	return qs.w(qs.db.Where("id = ?", ID))
}

// IDGt is an autogenerated method
// nolint: dupl
func (qs TicketQuerySet) IDGt(ID uint) TicketQuerySet {
	return qs.w(qs.db.Where("id > ?", ID))
}

// IDGte is an autogenerated method
// nolint: dupl
func (qs TicketQuerySet) IDGte(ID uint) TicketQuerySet {
	return qs.w(qs.db.Where("id >= ?", ID))
}

// IDIn is an autogenerated method
// nolint: dupl
func (qs TicketQuerySet) IDIn(ID uint, IDRest ...uint) TicketQuerySet {
	iArgs := []interface{}{ID}
	for _, arg := range IDRest {
		iArgs = append(iArgs, arg)
	}
	return qs.w(qs.db.Where("id IN (?)", iArgs))
}

// IDLt is an autogenerated method
// nolint: dupl
func (qs TicketQuerySet) IDLt(ID uint) TicketQuerySet {
	return qs.w(qs.db.Where("id < ?", ID))
}

// IDLte is an autogenerated method
// nolint: dupl
func (qs TicketQuerySet) IDLte(ID uint) TicketQuerySet {
	return qs.w(qs.db.Where("id <= ?", ID))
}

// IDNe is an autogenerated method
// nolint: dupl
func (qs TicketQuerySet) IDNe(ID uint) TicketQuerySet {
	return qs.w(qs.db.Where("id != ?", ID))
}

// IDNotIn is an autogenerated method
// nolint: dupl
func (qs TicketQuerySet) IDNotIn(ID uint, IDRest ...uint) TicketQuerySet {
	iArgs := []interface{}{ID}
	for _, arg := range IDRest {
		iArgs = append(iArgs, arg)
	}
	return qs.w(qs.db.Where("id NOT IN (?)", iArgs))
}

// Limit is an autogenerated method
// nolint: dupl
func (qs TicketQuerySet) Limit(limit int) TicketQuerySet {
	return qs.w(qs.db.Limit(limit))
}

// One is used to retrieve one result. It returns gorm.ErrRecordNotFound
// if nothing was fetched
func (qs TicketQuerySet) One(ret *Ticket) error {
	return qs.db.First(ret).Error
}

// OrderAscByCategory is an autogenerated method
// nolint: dupl
func (qs TicketQuerySet) OrderAscByCategory() TicketQuerySet {
	return qs.w(qs.db.Order("category ASC"))
}

// OrderAscByCreatedAt is an autogenerated method
// nolint: dupl
func (qs TicketQuerySet) OrderAscByCreatedAt() TicketQuerySet {
	return qs.w(qs.db.Order("created_at ASC"))
}

// OrderAscByDeletedAt is an autogenerated method
// nolint: dupl
func (qs TicketQuerySet) OrderAscByDeletedAt() TicketQuerySet {
	return qs.w(qs.db.Order("deleted_at ASC"))
}

// OrderAscByID is an autogenerated method
// nolint: dupl
func (qs TicketQuerySet) OrderAscByID() TicketQuerySet {
	return qs.w(qs.db.Order("id ASC"))
}

// OrderAscByOwnerID is an autogenerated method
// nolint: dupl
func (qs TicketQuerySet) OrderAscByOwnerID() TicketQuerySet {
	return qs.w(qs.db.Order("owner_id ASC"))
}

// OrderAscByStatus is an autogenerated method
// nolint: dupl
func (qs TicketQuerySet) OrderAscByStatus() TicketQuerySet {
	return qs.w(qs.db.Order("status ASC"))
}

// OrderAscByUpdatedAt is an autogenerated method
// nolint: dupl
func (qs TicketQuerySet) OrderAscByUpdatedAt() TicketQuerySet {
	return qs.w(qs.db.Order("updated_at ASC"))
}

// OrderDescByCategory is an autogenerated method
// nolint: dupl
func (qs TicketQuerySet) OrderDescByCategory() TicketQuerySet {
	return qs.w(qs.db.Order("category DESC"))
}

// OrderDescByCreatedAt is an autogenerated method
// nolint: dupl
func (qs TicketQuerySet) OrderDescByCreatedAt() TicketQuerySet {
	return qs.w(qs.db.Order("created_at DESC"))
}

// OrderDescByDeletedAt is an autogenerated method
// nolint: dupl
func (qs TicketQuerySet) OrderDescByDeletedAt() TicketQuerySet {
	return qs.w(qs.db.Order("deleted_at DESC"))
}

// OrderDescByID is an autogenerated method
// nolint: dupl
func (qs TicketQuerySet) OrderDescByID() TicketQuerySet {
	return qs.w(qs.db.Order("id DESC"))
}

// OrderDescByOwnerID is an autogenerated method
// nolint: dupl
func (qs TicketQuerySet) OrderDescByOwnerID() TicketQuerySet {
	return qs.w(qs.db.Order("owner_id DESC"))
}

// OrderDescByStatus is an autogenerated method
// nolint: dupl
func (qs TicketQuerySet) OrderDescByStatus() TicketQuerySet {
	return qs.w(qs.db.Order("status DESC"))
}

// OrderDescByUpdatedAt is an autogenerated method
// nolint: dupl
func (qs TicketQuerySet) OrderDescByUpdatedAt() TicketQuerySet {
	return qs.w(qs.db.Order("updated_at DESC"))
}

// OwnerIDEq is an autogenerated method
// nolint: dupl
func (qs TicketQuerySet) OwnerIDEq(ownerID uint) TicketQuerySet {
	return qs.w(qs.db.Where("owner_id = ?", ownerID))
}

// OwnerIDGt is an autogenerated method
// nolint: dupl
func (qs TicketQuerySet) OwnerIDGt(ownerID uint) TicketQuerySet {
	return qs.w(qs.db.Where("owner_id > ?", ownerID))
}

// OwnerIDGte is an autogenerated method
// nolint: dupl
func (qs TicketQuerySet) OwnerIDGte(ownerID uint) TicketQuerySet {
	return qs.w(qs.db.Where("owner_id >= ?", ownerID))
}

// OwnerIDIn is an autogenerated method
// nolint: dupl
func (qs TicketQuerySet) OwnerIDIn(ownerID uint, ownerIDRest ...uint) TicketQuerySet {
	iArgs := []interface{}{ownerID}
	for _, arg := range ownerIDRest {
		iArgs = append(iArgs, arg)
	}
	return qs.w(qs.db.Where("owner_id IN (?)", iArgs))
}

// OwnerIDLt is an autogenerated method
// nolint: dupl
func (qs TicketQuerySet) OwnerIDLt(ownerID uint) TicketQuerySet {
	return qs.w(qs.db.Where("owner_id < ?", ownerID))
}

// OwnerIDLte is an autogenerated method
// nolint: dupl
func (qs TicketQuerySet) OwnerIDLte(ownerID uint) TicketQuerySet {
	return qs.w(qs.db.Where("owner_id <= ?", ownerID))
}

// OwnerIDNe is an autogenerated method
// nolint: dupl
func (qs TicketQuerySet) OwnerIDNe(ownerID uint) TicketQuerySet {
	return qs.w(qs.db.Where("owner_id != ?", ownerID))
}

// OwnerIDNotIn is an autogenerated method
// nolint: dupl
func (qs TicketQuerySet) OwnerIDNotIn(ownerID uint, ownerIDRest ...uint) TicketQuerySet {
	iArgs := []interface{}{ownerID}
	for _, arg := range ownerIDRest {
		iArgs = append(iArgs, arg)
	}
	return qs.w(qs.db.Where("owner_id NOT IN (?)", iArgs))
}

// SetCategory is an autogenerated method
// nolint: dupl
func (u TicketUpdater) SetCategory(category uint) TicketUpdater {
	u.fields[string(TicketDBSchema.Category)] = category
	return u
}

// SetCreatedAt is an autogenerated method
// nolint: dupl
func (u TicketUpdater) SetCreatedAt(createdAt time.Time) TicketUpdater {
	u.fields[string(TicketDBSchema.CreatedAt)] = createdAt
	return u
}

// SetDeletedAt is an autogenerated method
// nolint: dupl
func (u TicketUpdater) SetDeletedAt(deletedAt *time.Time) TicketUpdater {
	u.fields[string(TicketDBSchema.DeletedAt)] = deletedAt
	return u
}

// SetEmail is an autogenerated method
// nolint: dupl
func (u TicketUpdater) SetEmail(email string) TicketUpdater {
	u.fields[string(TicketDBSchema.Email)] = email
	return u
}

// SetID is an autogenerated method
// nolint: dupl
func (u TicketUpdater) SetID(ID uint) TicketUpdater {
	u.fields[string(TicketDBSchema.ID)] = ID
	return u
}

// SetOwnerID is an autogenerated method
// nolint: dupl
func (u TicketUpdater) SetOwnerID(ownerID uint) TicketUpdater {
	u.fields[string(TicketDBSchema.OwnerID)] = ownerID
	return u
}

// SetStatus is an autogenerated method
// nolint: dupl
func (u TicketUpdater) SetStatus(status TicketStatus) TicketUpdater {
	u.fields[string(TicketDBSchema.Status)] = status
	return u
}

// SetTitle is an autogenerated method
// nolint: dupl
func (u TicketUpdater) SetTitle(title string) TicketUpdater {
	u.fields[string(TicketDBSchema.Title)] = title
	return u
}

// SetUpdatedAt is an autogenerated method
// nolint: dupl
func (u TicketUpdater) SetUpdatedAt(updatedAt time.Time) TicketUpdater {
	u.fields[string(TicketDBSchema.UpdatedAt)] = updatedAt
	return u
}

// StatusEq is an autogenerated method
// nolint: dupl
func (qs TicketQuerySet) StatusEq(status TicketStatus) TicketQuerySet {
	return qs.w(qs.db.Where("status = ?", status))
}

// StatusGt is an autogenerated method
// nolint: dupl
func (qs TicketQuerySet) StatusGt(status TicketStatus) TicketQuerySet {
	return qs.w(qs.db.Where("status > ?", status))
}

// StatusGte is an autogenerated method
// nolint: dupl
func (qs TicketQuerySet) StatusGte(status TicketStatus) TicketQuerySet {
	return qs.w(qs.db.Where("status >= ?", status))
}

// StatusIn is an autogenerated method
// nolint: dupl
func (qs TicketQuerySet) StatusIn(status TicketStatus, statusRest ...TicketStatus) TicketQuerySet {
	iArgs := []interface{}{status}
	for _, arg := range statusRest {
		iArgs = append(iArgs, arg)
	}
	return qs.w(qs.db.Where("status IN (?)", iArgs))
}

// StatusLt is an autogenerated method
// nolint: dupl
func (qs TicketQuerySet) StatusLt(status TicketStatus) TicketQuerySet {
	return qs.w(qs.db.Where("status < ?", status))
}

// StatusLte is an autogenerated method
// nolint: dupl
func (qs TicketQuerySet) StatusLte(status TicketStatus) TicketQuerySet {
	return qs.w(qs.db.Where("status <= ?", status))
}

// StatusNe is an autogenerated method
// nolint: dupl
func (qs TicketQuerySet) StatusNe(status TicketStatus) TicketQuerySet {
	return qs.w(qs.db.Where("status != ?", status))
}

// StatusNotIn is an autogenerated method
// nolint: dupl
func (qs TicketQuerySet) StatusNotIn(status TicketStatus, statusRest ...TicketStatus) TicketQuerySet {
	iArgs := []interface{}{status}
	for _, arg := range statusRest {
		iArgs = append(iArgs, arg)
	}
	return qs.w(qs.db.Where("status NOT IN (?)", iArgs))
}

// TitleEq is an autogenerated method
// nolint: dupl
func (qs TicketQuerySet) TitleEq(title string) TicketQuerySet {
	return qs.w(qs.db.Where("title = ?", title))
}

// TitleIn is an autogenerated method
// nolint: dupl
func (qs TicketQuerySet) TitleIn(title string, titleRest ...string) TicketQuerySet {
	iArgs := []interface{}{title}
	for _, arg := range titleRest {
		iArgs = append(iArgs, arg)
	}
	return qs.w(qs.db.Where("title IN (?)", iArgs))
}

// TitleNe is an autogenerated method
// nolint: dupl
func (qs TicketQuerySet) TitleNe(title string) TicketQuerySet {
	return qs.w(qs.db.Where("title != ?", title))
}

// TitleNotIn is an autogenerated method
// nolint: dupl
func (qs TicketQuerySet) TitleNotIn(title string, titleRest ...string) TicketQuerySet {
	iArgs := []interface{}{title}
	for _, arg := range titleRest {
		iArgs = append(iArgs, arg)
	}
	return qs.w(qs.db.Where("title NOT IN (?)", iArgs))
}

// Update is an autogenerated method
// nolint: dupl
func (u TicketUpdater) Update() error {
	return u.db.Updates(u.fields).Error
}

// UpdateNum is an autogenerated method
// nolint: dupl
func (u TicketUpdater) UpdateNum() (int64, error) {
	db := u.db.Updates(u.fields)
	return db.RowsAffected, db.Error
}

// UpdatedAtEq is an autogenerated method
// nolint: dupl
func (qs TicketQuerySet) UpdatedAtEq(updatedAt time.Time) TicketQuerySet {
	return qs.w(qs.db.Where("updated_at = ?", updatedAt))
}

// UpdatedAtGt is an autogenerated method
// nolint: dupl
func (qs TicketQuerySet) UpdatedAtGt(updatedAt time.Time) TicketQuerySet {
	return qs.w(qs.db.Where("updated_at > ?", updatedAt))
}

// UpdatedAtGte is an autogenerated method
// nolint: dupl
func (qs TicketQuerySet) UpdatedAtGte(updatedAt time.Time) TicketQuerySet {
	return qs.w(qs.db.Where("updated_at >= ?", updatedAt))
}

// UpdatedAtLt is an autogenerated method
// nolint: dupl
func (qs TicketQuerySet) UpdatedAtLt(updatedAt time.Time) TicketQuerySet {
	return qs.w(qs.db.Where("updated_at < ?", updatedAt))
}

// UpdatedAtLte is an autogenerated method
// nolint: dupl
func (qs TicketQuerySet) UpdatedAtLte(updatedAt time.Time) TicketQuerySet {
	return qs.w(qs.db.Where("updated_at <= ?", updatedAt))
}

// UpdatedAtNe is an autogenerated method
// nolint: dupl
func (qs TicketQuerySet) UpdatedAtNe(updatedAt time.Time) TicketQuerySet {
	return qs.w(qs.db.Where("updated_at != ?", updatedAt))
}

// ===== END of query set TicketQuerySet

// ===== BEGIN of Ticket modifiers

type ticketDBSchemaField string

func (f ticketDBSchemaField) String() string {
	return string(f)
}

// TicketDBSchema stores db field names of Ticket
var TicketDBSchema = struct {
	ID        ticketDBSchemaField
	CreatedAt ticketDBSchemaField
	UpdatedAt ticketDBSchemaField
	DeletedAt ticketDBSchemaField
	OwnerID   ticketDBSchemaField
	Title     ticketDBSchemaField
	Category  ticketDBSchemaField
	Email     ticketDBSchemaField
	Status    ticketDBSchemaField
}{

	ID:        ticketDBSchemaField("id"),
	CreatedAt: ticketDBSchemaField("created_at"),
	UpdatedAt: ticketDBSchemaField("updated_at"),
	DeletedAt: ticketDBSchemaField("deleted_at"),
	OwnerID:   ticketDBSchemaField("owner_id"),
	Title:     ticketDBSchemaField("title"),
	Category:  ticketDBSchemaField("category"),
	Email:     ticketDBSchemaField("email"),
	Status:    ticketDBSchemaField("status"),
}

// Update updates Ticket fields by primary key
func (o *Ticket) Update(db *gorm.DB, fields ...ticketDBSchemaField) error {
	dbNameToFieldName := map[string]interface{}{
		"id":         o.ID,
		"created_at": o.CreatedAt,
		"updated_at": o.UpdatedAt,
		"deleted_at": o.DeletedAt,
		"owner_id":   o.OwnerID,
		"title":      o.Title,
		"category":   o.Category,
		"email":      o.Email,
		"status":     o.Status,
	}
	u := map[string]interface{}{}
	for _, f := range fields {
		fs := f.String()
		u[fs] = dbNameToFieldName[fs]
	}
	if err := db.Model(o).Updates(u).Error; err != nil {
		if err == gorm.ErrRecordNotFound {
			return err
		}

		return fmt.Errorf("can't update Ticket %v fields %v: %s",
			o, fields, err)
	}

	return nil
}

// TicketUpdater is an Ticket updates manager
type TicketUpdater struct {
	fields map[string]interface{}
	db     *gorm.DB
}

// NewTicketUpdater creates new Ticket updater
func NewTicketUpdater(db *gorm.DB) TicketUpdater {
	return TicketUpdater{
		fields: map[string]interface{}{},
		db:     db.Model(&Ticket{}),
	}
}

// ===== END of Ticket modifiers

// ===== END of all query sets
