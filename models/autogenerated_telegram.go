package models

import (
	"fmt"

	"github.com/jinzhu/gorm"
)

// ===== BEGIN of all query sets

// ===== BEGIN of query set TelegramBindQuerySet

// TelegramBindQuerySet is an queryset type for TelegramBind
type TelegramBindQuerySet struct {
	db *gorm.DB
}

// NewTelegramBindQuerySet constructs new TelegramBindQuerySet
func NewTelegramBindQuerySet(db *gorm.DB) TelegramBindQuerySet {
	return TelegramBindQuerySet{
		db: db.Model(&TelegramBind{}),
	}
}

func (qs TelegramBindQuerySet) w(db *gorm.DB) TelegramBindQuerySet {
	return NewTelegramBindQuerySet(db)
}

// All is an autogenerated method
// nolint: dupl
func (qs TelegramBindQuerySet) All(ret *[]TelegramBind) error {
	return qs.db.Find(ret).Error
}

// Count is an autogenerated method
// nolint: dupl
func (qs TelegramBindQuerySet) Count() (int, error) {
	var count int
	err := qs.db.Count(&count).Error
	return count, err
}

// Create is an autogenerated method
// nolint: dupl
func (o *TelegramBind) Create(db *gorm.DB) error {
	return db.Create(o).Error
}

// Delete is an autogenerated method
// nolint: dupl
func (o *TelegramBind) Delete(db *gorm.DB) error {
	return db.Delete(o).Error
}

// Delete is an autogenerated method
// nolint: dupl
func (qs TelegramBindQuerySet) Delete() error {
	return qs.db.Delete(TelegramBind{}).Error
}

// GetUpdater is an autogenerated method
// nolint: dupl
func (qs TelegramBindQuerySet) GetUpdater() TelegramBindUpdater {
	return NewTelegramBindUpdater(qs.db)
}

// Limit is an autogenerated method
// nolint: dupl
func (qs TelegramBindQuerySet) Limit(limit int) TelegramBindQuerySet {
	return qs.w(qs.db.Limit(limit))
}

// One is used to retrieve one result. It returns gorm.ErrRecordNotFound
// if nothing was fetched
func (qs TelegramBindQuerySet) One(ret *TelegramBind) error {
	return qs.db.First(ret).Error
}

// OrderAscByTelegramID is an autogenerated method
// nolint: dupl
func (qs TelegramBindQuerySet) OrderAscByTelegramID() TelegramBindQuerySet {
	return qs.w(qs.db.Order("telegram_id ASC"))
}

// OrderAscByUserID is an autogenerated method
// nolint: dupl
func (qs TelegramBindQuerySet) OrderAscByUserID() TelegramBindQuerySet {
	return qs.w(qs.db.Order("user_id ASC"))
}

// OrderDescByTelegramID is an autogenerated method
// nolint: dupl
func (qs TelegramBindQuerySet) OrderDescByTelegramID() TelegramBindQuerySet {
	return qs.w(qs.db.Order("telegram_id DESC"))
}

// OrderDescByUserID is an autogenerated method
// nolint: dupl
func (qs TelegramBindQuerySet) OrderDescByUserID() TelegramBindQuerySet {
	return qs.w(qs.db.Order("user_id DESC"))
}

// SetTelegramID is an autogenerated method
// nolint: dupl
func (u TelegramBindUpdater) SetTelegramID(telegramID int64) TelegramBindUpdater {
	u.fields[string(TelegramBindDBSchema.TelegramID)] = telegramID
	return u
}

// SetUserID is an autogenerated method
// nolint: dupl
func (u TelegramBindUpdater) SetUserID(userID uint) TelegramBindUpdater {
	u.fields[string(TelegramBindDBSchema.UserID)] = userID
	return u
}

// TelegramIDEq is an autogenerated method
// nolint: dupl
func (qs TelegramBindQuerySet) TelegramIDEq(telegramID int64) TelegramBindQuerySet {
	return qs.w(qs.db.Where("telegram_id = ?", telegramID))
}

// TelegramIDGt is an autogenerated method
// nolint: dupl
func (qs TelegramBindQuerySet) TelegramIDGt(telegramID int64) TelegramBindQuerySet {
	return qs.w(qs.db.Where("telegram_id > ?", telegramID))
}

// TelegramIDGte is an autogenerated method
// nolint: dupl
func (qs TelegramBindQuerySet) TelegramIDGte(telegramID int64) TelegramBindQuerySet {
	return qs.w(qs.db.Where("telegram_id >= ?", telegramID))
}

// TelegramIDIn is an autogenerated method
// nolint: dupl
func (qs TelegramBindQuerySet) TelegramIDIn(telegramID int64, telegramIDRest ...int64) TelegramBindQuerySet {
	iArgs := []interface{}{telegramID}
	for _, arg := range telegramIDRest {
		iArgs = append(iArgs, arg)
	}
	return qs.w(qs.db.Where("telegram_id IN (?)", iArgs))
}

// TelegramIDLt is an autogenerated method
// nolint: dupl
func (qs TelegramBindQuerySet) TelegramIDLt(telegramID int64) TelegramBindQuerySet {
	return qs.w(qs.db.Where("telegram_id < ?", telegramID))
}

// TelegramIDLte is an autogenerated method
// nolint: dupl
func (qs TelegramBindQuerySet) TelegramIDLte(telegramID int64) TelegramBindQuerySet {
	return qs.w(qs.db.Where("telegram_id <= ?", telegramID))
}

// TelegramIDNe is an autogenerated method
// nolint: dupl
func (qs TelegramBindQuerySet) TelegramIDNe(telegramID int64) TelegramBindQuerySet {
	return qs.w(qs.db.Where("telegram_id != ?", telegramID))
}

// TelegramIDNotIn is an autogenerated method
// nolint: dupl
func (qs TelegramBindQuerySet) TelegramIDNotIn(telegramID int64, telegramIDRest ...int64) TelegramBindQuerySet {
	iArgs := []interface{}{telegramID}
	for _, arg := range telegramIDRest {
		iArgs = append(iArgs, arg)
	}
	return qs.w(qs.db.Where("telegram_id NOT IN (?)", iArgs))
}

// Update is an autogenerated method
// nolint: dupl
func (u TelegramBindUpdater) Update() error {
	return u.db.Updates(u.fields).Error
}

// UpdateNum is an autogenerated method
// nolint: dupl
func (u TelegramBindUpdater) UpdateNum() (int64, error) {
	db := u.db.Updates(u.fields)
	return db.RowsAffected, db.Error
}

// UserIDEq is an autogenerated method
// nolint: dupl
func (qs TelegramBindQuerySet) UserIDEq(userID uint) TelegramBindQuerySet {
	return qs.w(qs.db.Where("user_id = ?", userID))
}

// UserIDGt is an autogenerated method
// nolint: dupl
func (qs TelegramBindQuerySet) UserIDGt(userID uint) TelegramBindQuerySet {
	return qs.w(qs.db.Where("user_id > ?", userID))
}

// UserIDGte is an autogenerated method
// nolint: dupl
func (qs TelegramBindQuerySet) UserIDGte(userID uint) TelegramBindQuerySet {
	return qs.w(qs.db.Where("user_id >= ?", userID))
}

// UserIDIn is an autogenerated method
// nolint: dupl
func (qs TelegramBindQuerySet) UserIDIn(userID uint, userIDRest ...uint) TelegramBindQuerySet {
	iArgs := []interface{}{userID}
	for _, arg := range userIDRest {
		iArgs = append(iArgs, arg)
	}
	return qs.w(qs.db.Where("user_id IN (?)", iArgs))
}

// UserIDLt is an autogenerated method
// nolint: dupl
func (qs TelegramBindQuerySet) UserIDLt(userID uint) TelegramBindQuerySet {
	return qs.w(qs.db.Where("user_id < ?", userID))
}

// UserIDLte is an autogenerated method
// nolint: dupl
func (qs TelegramBindQuerySet) UserIDLte(userID uint) TelegramBindQuerySet {
	return qs.w(qs.db.Where("user_id <= ?", userID))
}

// UserIDNe is an autogenerated method
// nolint: dupl
func (qs TelegramBindQuerySet) UserIDNe(userID uint) TelegramBindQuerySet {
	return qs.w(qs.db.Where("user_id != ?", userID))
}

// UserIDNotIn is an autogenerated method
// nolint: dupl
func (qs TelegramBindQuerySet) UserIDNotIn(userID uint, userIDRest ...uint) TelegramBindQuerySet {
	iArgs := []interface{}{userID}
	for _, arg := range userIDRest {
		iArgs = append(iArgs, arg)
	}
	return qs.w(qs.db.Where("user_id NOT IN (?)", iArgs))
}

// ===== END of query set TelegramBindQuerySet

// ===== BEGIN of TelegramBind modifiers

type telegramBindDBSchemaField string

func (f telegramBindDBSchemaField) String() string {
	return string(f)
}

// TelegramBindDBSchema stores db field names of TelegramBind
var TelegramBindDBSchema = struct {
	UserID     telegramBindDBSchemaField
	TelegramID telegramBindDBSchemaField
}{

	UserID:     telegramBindDBSchemaField("user_id"),
	TelegramID: telegramBindDBSchemaField("telegram_id"),
}

// Update updates TelegramBind fields by primary key
func (o *TelegramBind) Update(db *gorm.DB, fields ...telegramBindDBSchemaField) error {
	dbNameToFieldName := map[string]interface{}{
		"user_id":     o.UserID,
		"telegram_id": o.TelegramID,
	}
	u := map[string]interface{}{}
	for _, f := range fields {
		fs := f.String()
		u[fs] = dbNameToFieldName[fs]
	}
	if err := db.Model(o).Updates(u).Error; err != nil {
		if err == gorm.ErrRecordNotFound {
			return err
		}

		return fmt.Errorf("can't update TelegramBind %v fields %v: %s",
			o, fields, err)
	}

	return nil
}

// TelegramBindUpdater is an TelegramBind updates manager
type TelegramBindUpdater struct {
	fields map[string]interface{}
	db     *gorm.DB
}

// NewTelegramBindUpdater creates new TelegramBind updater
func NewTelegramBindUpdater(db *gorm.DB) TelegramBindUpdater {
	return TelegramBindUpdater{
		fields: map[string]interface{}{},
		db:     db.Model(&TelegramBind{}),
	}
}

// ===== END of TelegramBind modifiers

// ===== END of all query sets
