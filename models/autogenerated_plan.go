package models

import (
	"fmt"
	"time"

	"github.com/jinzhu/gorm"
)

// ===== BEGIN of all query sets

// ===== BEGIN of query set PlanQuerySet

// PlanQuerySet is an queryset type for Plan
type PlanQuerySet struct {
	db *gorm.DB
}

// NewPlanQuerySet constructs new PlanQuerySet
func NewPlanQuerySet(db *gorm.DB) PlanQuerySet {
	return PlanQuerySet{
		db: db.Model(&Plan{}),
	}
}

func (qs PlanQuerySet) w(db *gorm.DB) PlanQuerySet {
	return NewPlanQuerySet(db)
}

// All is an autogenerated method
// nolint: dupl
func (qs PlanQuerySet) All(ret *[]Plan) error {
	return qs.db.Find(ret).Error
}

// Count is an autogenerated method
// nolint: dupl
func (qs PlanQuerySet) Count() (int, error) {
	var count int
	err := qs.db.Count(&count).Error
	return count, err
}

// Create is an autogenerated method
// nolint: dupl
func (o *Plan) Create(db *gorm.DB) error {
	return db.Create(o).Error
}

// CreatedAtEq is an autogenerated method
// nolint: dupl
func (qs PlanQuerySet) CreatedAtEq(createdAt time.Time) PlanQuerySet {
	return qs.w(qs.db.Where("created_at = ?", createdAt))
}

// CreatedAtGt is an autogenerated method
// nolint: dupl
func (qs PlanQuerySet) CreatedAtGt(createdAt time.Time) PlanQuerySet {
	return qs.w(qs.db.Where("created_at > ?", createdAt))
}

// CreatedAtGte is an autogenerated method
// nolint: dupl
func (qs PlanQuerySet) CreatedAtGte(createdAt time.Time) PlanQuerySet {
	return qs.w(qs.db.Where("created_at >= ?", createdAt))
}

// CreatedAtLt is an autogenerated method
// nolint: dupl
func (qs PlanQuerySet) CreatedAtLt(createdAt time.Time) PlanQuerySet {
	return qs.w(qs.db.Where("created_at < ?", createdAt))
}

// CreatedAtLte is an autogenerated method
// nolint: dupl
func (qs PlanQuerySet) CreatedAtLte(createdAt time.Time) PlanQuerySet {
	return qs.w(qs.db.Where("created_at <= ?", createdAt))
}

// CreatedAtNe is an autogenerated method
// nolint: dupl
func (qs PlanQuerySet) CreatedAtNe(createdAt time.Time) PlanQuerySet {
	return qs.w(qs.db.Where("created_at != ?", createdAt))
}

// CurrencyEq is an autogenerated method
// nolint: dupl
func (qs PlanQuerySet) CurrencyEq(currency uint) PlanQuerySet {
	return qs.w(qs.db.Where("currency = ?", currency))
}

// CurrencyGt is an autogenerated method
// nolint: dupl
func (qs PlanQuerySet) CurrencyGt(currency uint) PlanQuerySet {
	return qs.w(qs.db.Where("currency > ?", currency))
}

// CurrencyGte is an autogenerated method
// nolint: dupl
func (qs PlanQuerySet) CurrencyGte(currency uint) PlanQuerySet {
	return qs.w(qs.db.Where("currency >= ?", currency))
}

// CurrencyIn is an autogenerated method
// nolint: dupl
func (qs PlanQuerySet) CurrencyIn(currency uint, currencyRest ...uint) PlanQuerySet {
	iArgs := []interface{}{currency}
	for _, arg := range currencyRest {
		iArgs = append(iArgs, arg)
	}
	return qs.w(qs.db.Where("currency IN (?)", iArgs))
}

// CurrencyLt is an autogenerated method
// nolint: dupl
func (qs PlanQuerySet) CurrencyLt(currency uint) PlanQuerySet {
	return qs.w(qs.db.Where("currency < ?", currency))
}

// CurrencyLte is an autogenerated method
// nolint: dupl
func (qs PlanQuerySet) CurrencyLte(currency uint) PlanQuerySet {
	return qs.w(qs.db.Where("currency <= ?", currency))
}

// CurrencyNe is an autogenerated method
// nolint: dupl
func (qs PlanQuerySet) CurrencyNe(currency uint) PlanQuerySet {
	return qs.w(qs.db.Where("currency != ?", currency))
}

// CurrencyNotIn is an autogenerated method
// nolint: dupl
func (qs PlanQuerySet) CurrencyNotIn(currency uint, currencyRest ...uint) PlanQuerySet {
	iArgs := []interface{}{currency}
	for _, arg := range currencyRest {
		iArgs = append(iArgs, arg)
	}
	return qs.w(qs.db.Where("currency NOT IN (?)", iArgs))
}

// Delete is an autogenerated method
// nolint: dupl
func (qs PlanQuerySet) Delete() error {
	return qs.db.Delete(Plan{}).Error
}

// Delete is an autogenerated method
// nolint: dupl
func (o *Plan) Delete(db *gorm.DB) error {
	return db.Delete(o).Error
}

// DeletedAtEq is an autogenerated method
// nolint: dupl
func (qs PlanQuerySet) DeletedAtEq(deletedAt time.Time) PlanQuerySet {
	return qs.w(qs.db.Where("deleted_at = ?", deletedAt))
}

// DeletedAtGt is an autogenerated method
// nolint: dupl
func (qs PlanQuerySet) DeletedAtGt(deletedAt time.Time) PlanQuerySet {
	return qs.w(qs.db.Where("deleted_at > ?", deletedAt))
}

// DeletedAtGte is an autogenerated method
// nolint: dupl
func (qs PlanQuerySet) DeletedAtGte(deletedAt time.Time) PlanQuerySet {
	return qs.w(qs.db.Where("deleted_at >= ?", deletedAt))
}

// DeletedAtIsNotNull is an autogenerated method
// nolint: dupl
func (qs PlanQuerySet) DeletedAtIsNotNull() PlanQuerySet {
	return qs.w(qs.db.Where("deleted_at IS NOT NULL"))
}

// DeletedAtIsNull is an autogenerated method
// nolint: dupl
func (qs PlanQuerySet) DeletedAtIsNull() PlanQuerySet {
	return qs.w(qs.db.Where("deleted_at IS NULL"))
}

// DeletedAtLt is an autogenerated method
// nolint: dupl
func (qs PlanQuerySet) DeletedAtLt(deletedAt time.Time) PlanQuerySet {
	return qs.w(qs.db.Where("deleted_at < ?", deletedAt))
}

// DeletedAtLte is an autogenerated method
// nolint: dupl
func (qs PlanQuerySet) DeletedAtLte(deletedAt time.Time) PlanQuerySet {
	return qs.w(qs.db.Where("deleted_at <= ?", deletedAt))
}

// DeletedAtNe is an autogenerated method
// nolint: dupl
func (qs PlanQuerySet) DeletedAtNe(deletedAt time.Time) PlanQuerySet {
	return qs.w(qs.db.Where("deleted_at != ?", deletedAt))
}

// DurationEq is an autogenerated method
// nolint: dupl
func (qs PlanQuerySet) DurationEq(duration time.Duration) PlanQuerySet {
	return qs.w(qs.db.Where("duration = ?", duration))
}

// DurationGt is an autogenerated method
// nolint: dupl
func (qs PlanQuerySet) DurationGt(duration time.Duration) PlanQuerySet {
	return qs.w(qs.db.Where("duration > ?", duration))
}

// DurationGte is an autogenerated method
// nolint: dupl
func (qs PlanQuerySet) DurationGte(duration time.Duration) PlanQuerySet {
	return qs.w(qs.db.Where("duration >= ?", duration))
}

// DurationIn is an autogenerated method
// nolint: dupl
func (qs PlanQuerySet) DurationIn(duration time.Duration, durationRest ...time.Duration) PlanQuerySet {
	iArgs := []interface{}{duration}
	for _, arg := range durationRest {
		iArgs = append(iArgs, arg)
	}
	return qs.w(qs.db.Where("duration IN (?)", iArgs))
}

// DurationLt is an autogenerated method
// nolint: dupl
func (qs PlanQuerySet) DurationLt(duration time.Duration) PlanQuerySet {
	return qs.w(qs.db.Where("duration < ?", duration))
}

// DurationLte is an autogenerated method
// nolint: dupl
func (qs PlanQuerySet) DurationLte(duration time.Duration) PlanQuerySet {
	return qs.w(qs.db.Where("duration <= ?", duration))
}

// DurationNe is an autogenerated method
// nolint: dupl
func (qs PlanQuerySet) DurationNe(duration time.Duration) PlanQuerySet {
	return qs.w(qs.db.Where("duration != ?", duration))
}

// DurationNotIn is an autogenerated method
// nolint: dupl
func (qs PlanQuerySet) DurationNotIn(duration time.Duration, durationRest ...time.Duration) PlanQuerySet {
	iArgs := []interface{}{duration}
	for _, arg := range durationRest {
		iArgs = append(iArgs, arg)
	}
	return qs.w(qs.db.Where("duration NOT IN (?)", iArgs))
}

// GetUpdater is an autogenerated method
// nolint: dupl
func (qs PlanQuerySet) GetUpdater() PlanUpdater {
	return NewPlanUpdater(qs.db)
}

// IDEq is an autogenerated method
// nolint: dupl
func (qs PlanQuerySet) IDEq(ID uint) PlanQuerySet {
	return qs.w(qs.db.Where("id = ?", ID))
}

// IDGt is an autogenerated method
// nolint: dupl
func (qs PlanQuerySet) IDGt(ID uint) PlanQuerySet {
	return qs.w(qs.db.Where("id > ?", ID))
}

// IDGte is an autogenerated method
// nolint: dupl
func (qs PlanQuerySet) IDGte(ID uint) PlanQuerySet {
	return qs.w(qs.db.Where("id >= ?", ID))
}

// IDIn is an autogenerated method
// nolint: dupl
func (qs PlanQuerySet) IDIn(ID uint, IDRest ...uint) PlanQuerySet {
	iArgs := []interface{}{ID}
	for _, arg := range IDRest {
		iArgs = append(iArgs, arg)
	}
	return qs.w(qs.db.Where("id IN (?)", iArgs))
}

// IDLt is an autogenerated method
// nolint: dupl
func (qs PlanQuerySet) IDLt(ID uint) PlanQuerySet {
	return qs.w(qs.db.Where("id < ?", ID))
}

// IDLte is an autogenerated method
// nolint: dupl
func (qs PlanQuerySet) IDLte(ID uint) PlanQuerySet {
	return qs.w(qs.db.Where("id <= ?", ID))
}

// IDNe is an autogenerated method
// nolint: dupl
func (qs PlanQuerySet) IDNe(ID uint) PlanQuerySet {
	return qs.w(qs.db.Where("id != ?", ID))
}

// IDNotIn is an autogenerated method
// nolint: dupl
func (qs PlanQuerySet) IDNotIn(ID uint, IDRest ...uint) PlanQuerySet {
	iArgs := []interface{}{ID}
	for _, arg := range IDRest {
		iArgs = append(iArgs, arg)
	}
	return qs.w(qs.db.Where("id NOT IN (?)", iArgs))
}

// Limit is an autogenerated method
// nolint: dupl
func (qs PlanQuerySet) Limit(limit int) PlanQuerySet {
	return qs.w(qs.db.Limit(limit))
}

// MinInvestmentAmountEq is an autogenerated method
// nolint: dupl
func (qs PlanQuerySet) MinInvestmentAmountEq(minInvestmentAmount uint) PlanQuerySet {
	return qs.w(qs.db.Where("min_investment_amount = ?", minInvestmentAmount))
}

// MinInvestmentAmountGt is an autogenerated method
// nolint: dupl
func (qs PlanQuerySet) MinInvestmentAmountGt(minInvestmentAmount uint) PlanQuerySet {
	return qs.w(qs.db.Where("min_investment_amount > ?", minInvestmentAmount))
}

// MinInvestmentAmountGte is an autogenerated method
// nolint: dupl
func (qs PlanQuerySet) MinInvestmentAmountGte(minInvestmentAmount uint) PlanQuerySet {
	return qs.w(qs.db.Where("min_investment_amount >= ?", minInvestmentAmount))
}

// MinInvestmentAmountIn is an autogenerated method
// nolint: dupl
func (qs PlanQuerySet) MinInvestmentAmountIn(minInvestmentAmount uint, minInvestmentAmountRest ...uint) PlanQuerySet {
	iArgs := []interface{}{minInvestmentAmount}
	for _, arg := range minInvestmentAmountRest {
		iArgs = append(iArgs, arg)
	}
	return qs.w(qs.db.Where("min_investment_amount IN (?)", iArgs))
}

// MinInvestmentAmountLt is an autogenerated method
// nolint: dupl
func (qs PlanQuerySet) MinInvestmentAmountLt(minInvestmentAmount uint) PlanQuerySet {
	return qs.w(qs.db.Where("min_investment_amount < ?", minInvestmentAmount))
}

// MinInvestmentAmountLte is an autogenerated method
// nolint: dupl
func (qs PlanQuerySet) MinInvestmentAmountLte(minInvestmentAmount uint) PlanQuerySet {
	return qs.w(qs.db.Where("min_investment_amount <= ?", minInvestmentAmount))
}

// MinInvestmentAmountNe is an autogenerated method
// nolint: dupl
func (qs PlanQuerySet) MinInvestmentAmountNe(minInvestmentAmount uint) PlanQuerySet {
	return qs.w(qs.db.Where("min_investment_amount != ?", minInvestmentAmount))
}

// MinInvestmentAmountNotIn is an autogenerated method
// nolint: dupl
func (qs PlanQuerySet) MinInvestmentAmountNotIn(minInvestmentAmount uint, minInvestmentAmountRest ...uint) PlanQuerySet {
	iArgs := []interface{}{minInvestmentAmount}
	for _, arg := range minInvestmentAmountRest {
		iArgs = append(iArgs, arg)
	}
	return qs.w(qs.db.Where("min_investment_amount NOT IN (?)", iArgs))
}

// One is used to retrieve one result. It returns gorm.ErrRecordNotFound
// if nothing was fetched
func (qs PlanQuerySet) One(ret *Plan) error {
	return qs.db.First(ret).Error
}

// OrderAscByCreatedAt is an autogenerated method
// nolint: dupl
func (qs PlanQuerySet) OrderAscByCreatedAt() PlanQuerySet {
	return qs.w(qs.db.Order("created_at ASC"))
}

// OrderAscByCurrency is an autogenerated method
// nolint: dupl
func (qs PlanQuerySet) OrderAscByCurrency() PlanQuerySet {
	return qs.w(qs.db.Order("currency ASC"))
}

// OrderAscByDeletedAt is an autogenerated method
// nolint: dupl
func (qs PlanQuerySet) OrderAscByDeletedAt() PlanQuerySet {
	return qs.w(qs.db.Order("deleted_at ASC"))
}

// OrderAscByDuration is an autogenerated method
// nolint: dupl
func (qs PlanQuerySet) OrderAscByDuration() PlanQuerySet {
	return qs.w(qs.db.Order("duration ASC"))
}

// OrderAscByID is an autogenerated method
// nolint: dupl
func (qs PlanQuerySet) OrderAscByID() PlanQuerySet {
	return qs.w(qs.db.Order("id ASC"))
}

// OrderAscByMinInvestmentAmount is an autogenerated method
// nolint: dupl
func (qs PlanQuerySet) OrderAscByMinInvestmentAmount() PlanQuerySet {
	return qs.w(qs.db.Order("min_investment_amount ASC"))
}

// OrderAscByProfit is an autogenerated method
// nolint: dupl
func (qs PlanQuerySet) OrderAscByProfit() PlanQuerySet {
	return qs.w(qs.db.Order("profit ASC"))
}

// OrderAscByUpdatedAt is an autogenerated method
// nolint: dupl
func (qs PlanQuerySet) OrderAscByUpdatedAt() PlanQuerySet {
	return qs.w(qs.db.Order("updated_at ASC"))
}

// OrderDescByCreatedAt is an autogenerated method
// nolint: dupl
func (qs PlanQuerySet) OrderDescByCreatedAt() PlanQuerySet {
	return qs.w(qs.db.Order("created_at DESC"))
}

// OrderDescByCurrency is an autogenerated method
// nolint: dupl
func (qs PlanQuerySet) OrderDescByCurrency() PlanQuerySet {
	return qs.w(qs.db.Order("currency DESC"))
}

// OrderDescByDeletedAt is an autogenerated method
// nolint: dupl
func (qs PlanQuerySet) OrderDescByDeletedAt() PlanQuerySet {
	return qs.w(qs.db.Order("deleted_at DESC"))
}

// OrderDescByDuration is an autogenerated method
// nolint: dupl
func (qs PlanQuerySet) OrderDescByDuration() PlanQuerySet {
	return qs.w(qs.db.Order("duration DESC"))
}

// OrderDescByID is an autogenerated method
// nolint: dupl
func (qs PlanQuerySet) OrderDescByID() PlanQuerySet {
	return qs.w(qs.db.Order("id DESC"))
}

// OrderDescByMinInvestmentAmount is an autogenerated method
// nolint: dupl
func (qs PlanQuerySet) OrderDescByMinInvestmentAmount() PlanQuerySet {
	return qs.w(qs.db.Order("min_investment_amount DESC"))
}

// OrderDescByProfit is an autogenerated method
// nolint: dupl
func (qs PlanQuerySet) OrderDescByProfit() PlanQuerySet {
	return qs.w(qs.db.Order("profit DESC"))
}

// OrderDescByUpdatedAt is an autogenerated method
// nolint: dupl
func (qs PlanQuerySet) OrderDescByUpdatedAt() PlanQuerySet {
	return qs.w(qs.db.Order("updated_at DESC"))
}

// ProfitEq is an autogenerated method
// nolint: dupl
func (qs PlanQuerySet) ProfitEq(profit float64) PlanQuerySet {
	return qs.w(qs.db.Where("profit = ?", profit))
}

// ProfitGt is an autogenerated method
// nolint: dupl
func (qs PlanQuerySet) ProfitGt(profit float64) PlanQuerySet {
	return qs.w(qs.db.Where("profit > ?", profit))
}

// ProfitGte is an autogenerated method
// nolint: dupl
func (qs PlanQuerySet) ProfitGte(profit float64) PlanQuerySet {
	return qs.w(qs.db.Where("profit >= ?", profit))
}

// ProfitIn is an autogenerated method
// nolint: dupl
func (qs PlanQuerySet) ProfitIn(profit float64, profitRest ...float64) PlanQuerySet {
	iArgs := []interface{}{profit}
	for _, arg := range profitRest {
		iArgs = append(iArgs, arg)
	}
	return qs.w(qs.db.Where("profit IN (?)", iArgs))
}

// ProfitLt is an autogenerated method
// nolint: dupl
func (qs PlanQuerySet) ProfitLt(profit float64) PlanQuerySet {
	return qs.w(qs.db.Where("profit < ?", profit))
}

// ProfitLte is an autogenerated method
// nolint: dupl
func (qs PlanQuerySet) ProfitLte(profit float64) PlanQuerySet {
	return qs.w(qs.db.Where("profit <= ?", profit))
}

// ProfitNe is an autogenerated method
// nolint: dupl
func (qs PlanQuerySet) ProfitNe(profit float64) PlanQuerySet {
	return qs.w(qs.db.Where("profit != ?", profit))
}

// ProfitNotIn is an autogenerated method
// nolint: dupl
func (qs PlanQuerySet) ProfitNotIn(profit float64, profitRest ...float64) PlanQuerySet {
	iArgs := []interface{}{profit}
	for _, arg := range profitRest {
		iArgs = append(iArgs, arg)
	}
	return qs.w(qs.db.Where("profit NOT IN (?)", iArgs))
}

// SetCreatedAt is an autogenerated method
// nolint: dupl
func (u PlanUpdater) SetCreatedAt(createdAt time.Time) PlanUpdater {
	u.fields[string(PlanDBSchema.CreatedAt)] = createdAt
	return u
}

// SetCurrency is an autogenerated method
// nolint: dupl
func (u PlanUpdater) SetCurrency(currency uint) PlanUpdater {
	u.fields[string(PlanDBSchema.Currency)] = currency
	return u
}

// SetDeletedAt is an autogenerated method
// nolint: dupl
func (u PlanUpdater) SetDeletedAt(deletedAt *time.Time) PlanUpdater {
	u.fields[string(PlanDBSchema.DeletedAt)] = deletedAt
	return u
}

// SetDuration is an autogenerated method
// nolint: dupl
func (u PlanUpdater) SetDuration(duration time.Duration) PlanUpdater {
	u.fields[string(PlanDBSchema.Duration)] = duration
	return u
}

// SetID is an autogenerated method
// nolint: dupl
func (u PlanUpdater) SetID(ID uint) PlanUpdater {
	u.fields[string(PlanDBSchema.ID)] = ID
	return u
}

// SetMinInvestmentAmount is an autogenerated method
// nolint: dupl
func (u PlanUpdater) SetMinInvestmentAmount(minInvestmentAmount uint) PlanUpdater {
	u.fields[string(PlanDBSchema.MinInvestmentAmount)] = minInvestmentAmount
	return u
}

// SetProfit is an autogenerated method
// nolint: dupl
func (u PlanUpdater) SetProfit(profit float64) PlanUpdater {
	u.fields[string(PlanDBSchema.Profit)] = profit
	return u
}

// SetUpdatedAt is an autogenerated method
// nolint: dupl
func (u PlanUpdater) SetUpdatedAt(updatedAt time.Time) PlanUpdater {
	u.fields[string(PlanDBSchema.UpdatedAt)] = updatedAt
	return u
}

// Update is an autogenerated method
// nolint: dupl
func (u PlanUpdater) Update() error {
	return u.db.Updates(u.fields).Error
}

// UpdateNum is an autogenerated method
// nolint: dupl
func (u PlanUpdater) UpdateNum() (int64, error) {
	db := u.db.Updates(u.fields)
	return db.RowsAffected, db.Error
}

// UpdatedAtEq is an autogenerated method
// nolint: dupl
func (qs PlanQuerySet) UpdatedAtEq(updatedAt time.Time) PlanQuerySet {
	return qs.w(qs.db.Where("updated_at = ?", updatedAt))
}

// UpdatedAtGt is an autogenerated method
// nolint: dupl
func (qs PlanQuerySet) UpdatedAtGt(updatedAt time.Time) PlanQuerySet {
	return qs.w(qs.db.Where("updated_at > ?", updatedAt))
}

// UpdatedAtGte is an autogenerated method
// nolint: dupl
func (qs PlanQuerySet) UpdatedAtGte(updatedAt time.Time) PlanQuerySet {
	return qs.w(qs.db.Where("updated_at >= ?", updatedAt))
}

// UpdatedAtLt is an autogenerated method
// nolint: dupl
func (qs PlanQuerySet) UpdatedAtLt(updatedAt time.Time) PlanQuerySet {
	return qs.w(qs.db.Where("updated_at < ?", updatedAt))
}

// UpdatedAtLte is an autogenerated method
// nolint: dupl
func (qs PlanQuerySet) UpdatedAtLte(updatedAt time.Time) PlanQuerySet {
	return qs.w(qs.db.Where("updated_at <= ?", updatedAt))
}

// UpdatedAtNe is an autogenerated method
// nolint: dupl
func (qs PlanQuerySet) UpdatedAtNe(updatedAt time.Time) PlanQuerySet {
	return qs.w(qs.db.Where("updated_at != ?", updatedAt))
}

// ===== END of query set PlanQuerySet

// ===== BEGIN of Plan modifiers

type planDBSchemaField string

func (f planDBSchemaField) String() string {
	return string(f)
}

// PlanDBSchema stores db field names of Plan
var PlanDBSchema = struct {
	ID                  planDBSchemaField
	CreatedAt           planDBSchemaField
	UpdatedAt           planDBSchemaField
	DeletedAt           planDBSchemaField
	Currency            planDBSchemaField
	MinInvestmentAmount planDBSchemaField
	Duration            planDBSchemaField
	Profit              planDBSchemaField
}{

	ID:                  planDBSchemaField("id"),
	CreatedAt:           planDBSchemaField("created_at"),
	UpdatedAt:           planDBSchemaField("updated_at"),
	DeletedAt:           planDBSchemaField("deleted_at"),
	Currency:            planDBSchemaField("currency"),
	MinInvestmentAmount: planDBSchemaField("min_investment_amount"),
	Duration:            planDBSchemaField("duration"),
	Profit:              planDBSchemaField("profit"),
}

// Update updates Plan fields by primary key
func (o *Plan) Update(db *gorm.DB, fields ...planDBSchemaField) error {
	dbNameToFieldName := map[string]interface{}{
		"id":                    o.ID,
		"created_at":            o.CreatedAt,
		"updated_at":            o.UpdatedAt,
		"deleted_at":            o.DeletedAt,
		"currency":              o.Currency,
		"min_investment_amount": o.MinInvestmentAmount,
		"duration":              o.Duration,
		"profit":                o.Profit,
	}
	u := map[string]interface{}{}
	for _, f := range fields {
		fs := f.String()
		u[fs] = dbNameToFieldName[fs]
	}
	if err := db.Model(o).Updates(u).Error; err != nil {
		if err == gorm.ErrRecordNotFound {
			return err
		}

		return fmt.Errorf("can't update Plan %v fields %v: %s",
			o, fields, err)
	}

	return nil
}

// PlanUpdater is an Plan updates manager
type PlanUpdater struct {
	fields map[string]interface{}
	db     *gorm.DB
}

// NewPlanUpdater creates new Plan updater
func NewPlanUpdater(db *gorm.DB) PlanUpdater {
	return PlanUpdater{
		fields: map[string]interface{}{},
		db:     db.Model(&Plan{}),
	}
}

// ===== END of Plan modifiers

// ===== END of all query sets
