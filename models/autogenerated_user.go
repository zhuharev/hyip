package models

import (
	"fmt"
	"time"

	"github.com/jinzhu/gorm"
)

// ===== BEGIN of all query sets

// ===== BEGIN of query set UserQuerySet

// UserQuerySet is an queryset type for User
type UserQuerySet struct {
	db *gorm.DB
}

// NewUserQuerySet constructs new UserQuerySet
func NewUserQuerySet(db *gorm.DB) UserQuerySet {
	return UserQuerySet{
		db: db.Model(&User{}),
	}
}

func (qs UserQuerySet) w(db *gorm.DB) UserQuerySet {
	return NewUserQuerySet(db)
}

// All is an autogenerated method
// nolint: dupl
func (qs UserQuerySet) All(ret *[]User) error {
	return qs.db.Find(ret).Error
}

// Count is an autogenerated method
// nolint: dupl
func (qs UserQuerySet) Count() (int, error) {
	var count int
	err := qs.db.Count(&count).Error
	return count, err
}

// Create is an autogenerated method
// nolint: dupl
func (o *User) Create(db *gorm.DB) error {
	return db.Create(o).Error
}

// CreatedAtEq is an autogenerated method
// nolint: dupl
func (qs UserQuerySet) CreatedAtEq(createdAt time.Time) UserQuerySet {
	return qs.w(qs.db.Where("created_at = ?", createdAt))
}

// CreatedAtGt is an autogenerated method
// nolint: dupl
func (qs UserQuerySet) CreatedAtGt(createdAt time.Time) UserQuerySet {
	return qs.w(qs.db.Where("created_at > ?", createdAt))
}

// CreatedAtGte is an autogenerated method
// nolint: dupl
func (qs UserQuerySet) CreatedAtGte(createdAt time.Time) UserQuerySet {
	return qs.w(qs.db.Where("created_at >= ?", createdAt))
}

// CreatedAtLt is an autogenerated method
// nolint: dupl
func (qs UserQuerySet) CreatedAtLt(createdAt time.Time) UserQuerySet {
	return qs.w(qs.db.Where("created_at < ?", createdAt))
}

// CreatedAtLte is an autogenerated method
// nolint: dupl
func (qs UserQuerySet) CreatedAtLte(createdAt time.Time) UserQuerySet {
	return qs.w(qs.db.Where("created_at <= ?", createdAt))
}

// CreatedAtNe is an autogenerated method
// nolint: dupl
func (qs UserQuerySet) CreatedAtNe(createdAt time.Time) UserQuerySet {
	return qs.w(qs.db.Where("created_at != ?", createdAt))
}

// Delete is an autogenerated method
// nolint: dupl
func (o *User) Delete(db *gorm.DB) error {
	return db.Delete(o).Error
}

// Delete is an autogenerated method
// nolint: dupl
func (qs UserQuerySet) Delete() error {
	return qs.db.Delete(User{}).Error
}

// DeletedAtEq is an autogenerated method
// nolint: dupl
func (qs UserQuerySet) DeletedAtEq(deletedAt time.Time) UserQuerySet {
	return qs.w(qs.db.Where("deleted_at = ?", deletedAt))
}

// DeletedAtGt is an autogenerated method
// nolint: dupl
func (qs UserQuerySet) DeletedAtGt(deletedAt time.Time) UserQuerySet {
	return qs.w(qs.db.Where("deleted_at > ?", deletedAt))
}

// DeletedAtGte is an autogenerated method
// nolint: dupl
func (qs UserQuerySet) DeletedAtGte(deletedAt time.Time) UserQuerySet {
	return qs.w(qs.db.Where("deleted_at >= ?", deletedAt))
}

// DeletedAtIsNotNull is an autogenerated method
// nolint: dupl
func (qs UserQuerySet) DeletedAtIsNotNull() UserQuerySet {
	return qs.w(qs.db.Where("deleted_at IS NOT NULL"))
}

// DeletedAtIsNull is an autogenerated method
// nolint: dupl
func (qs UserQuerySet) DeletedAtIsNull() UserQuerySet {
	return qs.w(qs.db.Where("deleted_at IS NULL"))
}

// DeletedAtLt is an autogenerated method
// nolint: dupl
func (qs UserQuerySet) DeletedAtLt(deletedAt time.Time) UserQuerySet {
	return qs.w(qs.db.Where("deleted_at < ?", deletedAt))
}

// DeletedAtLte is an autogenerated method
// nolint: dupl
func (qs UserQuerySet) DeletedAtLte(deletedAt time.Time) UserQuerySet {
	return qs.w(qs.db.Where("deleted_at <= ?", deletedAt))
}

// DeletedAtNe is an autogenerated method
// nolint: dupl
func (qs UserQuerySet) DeletedAtNe(deletedAt time.Time) UserQuerySet {
	return qs.w(qs.db.Where("deleted_at != ?", deletedAt))
}

// DepositWalletEq is an autogenerated method
// nolint: dupl
func (qs UserQuerySet) DepositWalletEq(depositWallet string) UserQuerySet {
	return qs.w(qs.db.Where("deposit_wallet = ?", depositWallet))
}

// DepositWalletIn is an autogenerated method
// nolint: dupl
func (qs UserQuerySet) DepositWalletIn(depositWallet string, depositWalletRest ...string) UserQuerySet {
	iArgs := []interface{}{depositWallet}
	for _, arg := range depositWalletRest {
		iArgs = append(iArgs, arg)
	}
	return qs.w(qs.db.Where("deposit_wallet IN (?)", iArgs))
}

// DepositWalletNe is an autogenerated method
// nolint: dupl
func (qs UserQuerySet) DepositWalletNe(depositWallet string) UserQuerySet {
	return qs.w(qs.db.Where("deposit_wallet != ?", depositWallet))
}

// DepositWalletNotIn is an autogenerated method
// nolint: dupl
func (qs UserQuerySet) DepositWalletNotIn(depositWallet string, depositWalletRest ...string) UserQuerySet {
	iArgs := []interface{}{depositWallet}
	for _, arg := range depositWalletRest {
		iArgs = append(iArgs, arg)
	}
	return qs.w(qs.db.Where("deposit_wallet NOT IN (?)", iArgs))
}

// EarnBTCEq is an autogenerated method
// nolint: dupl
func (qs UserQuerySet) EarnBTCEq(earnBTC float64) UserQuerySet {
	return qs.w(qs.db.Where("earn_btc = ?", earnBTC))
}

// EarnBTCGt is an autogenerated method
// nolint: dupl
func (qs UserQuerySet) EarnBTCGt(earnBTC float64) UserQuerySet {
	return qs.w(qs.db.Where("earn_btc > ?", earnBTC))
}

// EarnBTCGte is an autogenerated method
// nolint: dupl
func (qs UserQuerySet) EarnBTCGte(earnBTC float64) UserQuerySet {
	return qs.w(qs.db.Where("earn_btc >= ?", earnBTC))
}

// EarnBTCIn is an autogenerated method
// nolint: dupl
func (qs UserQuerySet) EarnBTCIn(earnBTC float64, earnBTCRest ...float64) UserQuerySet {
	iArgs := []interface{}{earnBTC}
	for _, arg := range earnBTCRest {
		iArgs = append(iArgs, arg)
	}
	return qs.w(qs.db.Where("earn_btc IN (?)", iArgs))
}

// EarnBTCLt is an autogenerated method
// nolint: dupl
func (qs UserQuerySet) EarnBTCLt(earnBTC float64) UserQuerySet {
	return qs.w(qs.db.Where("earn_btc < ?", earnBTC))
}

// EarnBTCLte is an autogenerated method
// nolint: dupl
func (qs UserQuerySet) EarnBTCLte(earnBTC float64) UserQuerySet {
	return qs.w(qs.db.Where("earn_btc <= ?", earnBTC))
}

// EarnBTCNe is an autogenerated method
// nolint: dupl
func (qs UserQuerySet) EarnBTCNe(earnBTC float64) UserQuerySet {
	return qs.w(qs.db.Where("earn_btc != ?", earnBTC))
}

// EarnBTCNotIn is an autogenerated method
// nolint: dupl
func (qs UserQuerySet) EarnBTCNotIn(earnBTC float64, earnBTCRest ...float64) UserQuerySet {
	iArgs := []interface{}{earnBTC}
	for _, arg := range earnBTCRest {
		iArgs = append(iArgs, arg)
	}
	return qs.w(qs.db.Where("earn_btc NOT IN (?)", iArgs))
}

// EarnUSDEq is an autogenerated method
// nolint: dupl
func (qs UserQuerySet) EarnUSDEq(earnUSD float64) UserQuerySet {
	return qs.w(qs.db.Where("earn_usd = ?", earnUSD))
}

// EarnUSDGt is an autogenerated method
// nolint: dupl
func (qs UserQuerySet) EarnUSDGt(earnUSD float64) UserQuerySet {
	return qs.w(qs.db.Where("earn_usd > ?", earnUSD))
}

// EarnUSDGte is an autogenerated method
// nolint: dupl
func (qs UserQuerySet) EarnUSDGte(earnUSD float64) UserQuerySet {
	return qs.w(qs.db.Where("earn_usd >= ?", earnUSD))
}

// EarnUSDIn is an autogenerated method
// nolint: dupl
func (qs UserQuerySet) EarnUSDIn(earnUSD float64, earnUSDRest ...float64) UserQuerySet {
	iArgs := []interface{}{earnUSD}
	for _, arg := range earnUSDRest {
		iArgs = append(iArgs, arg)
	}
	return qs.w(qs.db.Where("earn_usd IN (?)", iArgs))
}

// EarnUSDLt is an autogenerated method
// nolint: dupl
func (qs UserQuerySet) EarnUSDLt(earnUSD float64) UserQuerySet {
	return qs.w(qs.db.Where("earn_usd < ?", earnUSD))
}

// EarnUSDLte is an autogenerated method
// nolint: dupl
func (qs UserQuerySet) EarnUSDLte(earnUSD float64) UserQuerySet {
	return qs.w(qs.db.Where("earn_usd <= ?", earnUSD))
}

// EarnUSDNe is an autogenerated method
// nolint: dupl
func (qs UserQuerySet) EarnUSDNe(earnUSD float64) UserQuerySet {
	return qs.w(qs.db.Where("earn_usd != ?", earnUSD))
}

// EarnUSDNotIn is an autogenerated method
// nolint: dupl
func (qs UserQuerySet) EarnUSDNotIn(earnUSD float64, earnUSDRest ...float64) UserQuerySet {
	iArgs := []interface{}{earnUSD}
	for _, arg := range earnUSDRest {
		iArgs = append(iArgs, arg)
	}
	return qs.w(qs.db.Where("earn_usd NOT IN (?)", iArgs))
}

// EarnWithPartnersBTCEq is an autogenerated method
// nolint: dupl
func (qs UserQuerySet) EarnWithPartnersBTCEq(earnWithPartnersBTC float64) UserQuerySet {
	return qs.w(qs.db.Where("earn_with_partners_btc = ?", earnWithPartnersBTC))
}

// EarnWithPartnersBTCGt is an autogenerated method
// nolint: dupl
func (qs UserQuerySet) EarnWithPartnersBTCGt(earnWithPartnersBTC float64) UserQuerySet {
	return qs.w(qs.db.Where("earn_with_partners_btc > ?", earnWithPartnersBTC))
}

// EarnWithPartnersBTCGte is an autogenerated method
// nolint: dupl
func (qs UserQuerySet) EarnWithPartnersBTCGte(earnWithPartnersBTC float64) UserQuerySet {
	return qs.w(qs.db.Where("earn_with_partners_btc >= ?", earnWithPartnersBTC))
}

// EarnWithPartnersBTCIn is an autogenerated method
// nolint: dupl
func (qs UserQuerySet) EarnWithPartnersBTCIn(earnWithPartnersBTC float64, earnWithPartnersBTCRest ...float64) UserQuerySet {
	iArgs := []interface{}{earnWithPartnersBTC}
	for _, arg := range earnWithPartnersBTCRest {
		iArgs = append(iArgs, arg)
	}
	return qs.w(qs.db.Where("earn_with_partners_btc IN (?)", iArgs))
}

// EarnWithPartnersBTCLt is an autogenerated method
// nolint: dupl
func (qs UserQuerySet) EarnWithPartnersBTCLt(earnWithPartnersBTC float64) UserQuerySet {
	return qs.w(qs.db.Where("earn_with_partners_btc < ?", earnWithPartnersBTC))
}

// EarnWithPartnersBTCLte is an autogenerated method
// nolint: dupl
func (qs UserQuerySet) EarnWithPartnersBTCLte(earnWithPartnersBTC float64) UserQuerySet {
	return qs.w(qs.db.Where("earn_with_partners_btc <= ?", earnWithPartnersBTC))
}

// EarnWithPartnersBTCNe is an autogenerated method
// nolint: dupl
func (qs UserQuerySet) EarnWithPartnersBTCNe(earnWithPartnersBTC float64) UserQuerySet {
	return qs.w(qs.db.Where("earn_with_partners_btc != ?", earnWithPartnersBTC))
}

// EarnWithPartnersBTCNotIn is an autogenerated method
// nolint: dupl
func (qs UserQuerySet) EarnWithPartnersBTCNotIn(earnWithPartnersBTC float64, earnWithPartnersBTCRest ...float64) UserQuerySet {
	iArgs := []interface{}{earnWithPartnersBTC}
	for _, arg := range earnWithPartnersBTCRest {
		iArgs = append(iArgs, arg)
	}
	return qs.w(qs.db.Where("earn_with_partners_btc NOT IN (?)", iArgs))
}

// EarnWithPartnersUSDEq is an autogenerated method
// nolint: dupl
func (qs UserQuerySet) EarnWithPartnersUSDEq(earnWithPartnersUSD float64) UserQuerySet {
	return qs.w(qs.db.Where("earn_with_partners_usd = ?", earnWithPartnersUSD))
}

// EarnWithPartnersUSDGt is an autogenerated method
// nolint: dupl
func (qs UserQuerySet) EarnWithPartnersUSDGt(earnWithPartnersUSD float64) UserQuerySet {
	return qs.w(qs.db.Where("earn_with_partners_usd > ?", earnWithPartnersUSD))
}

// EarnWithPartnersUSDGte is an autogenerated method
// nolint: dupl
func (qs UserQuerySet) EarnWithPartnersUSDGte(earnWithPartnersUSD float64) UserQuerySet {
	return qs.w(qs.db.Where("earn_with_partners_usd >= ?", earnWithPartnersUSD))
}

// EarnWithPartnersUSDIn is an autogenerated method
// nolint: dupl
func (qs UserQuerySet) EarnWithPartnersUSDIn(earnWithPartnersUSD float64, earnWithPartnersUSDRest ...float64) UserQuerySet {
	iArgs := []interface{}{earnWithPartnersUSD}
	for _, arg := range earnWithPartnersUSDRest {
		iArgs = append(iArgs, arg)
	}
	return qs.w(qs.db.Where("earn_with_partners_usd IN (?)", iArgs))
}

// EarnWithPartnersUSDLt is an autogenerated method
// nolint: dupl
func (qs UserQuerySet) EarnWithPartnersUSDLt(earnWithPartnersUSD float64) UserQuerySet {
	return qs.w(qs.db.Where("earn_with_partners_usd < ?", earnWithPartnersUSD))
}

// EarnWithPartnersUSDLte is an autogenerated method
// nolint: dupl
func (qs UserQuerySet) EarnWithPartnersUSDLte(earnWithPartnersUSD float64) UserQuerySet {
	return qs.w(qs.db.Where("earn_with_partners_usd <= ?", earnWithPartnersUSD))
}

// EarnWithPartnersUSDNe is an autogenerated method
// nolint: dupl
func (qs UserQuerySet) EarnWithPartnersUSDNe(earnWithPartnersUSD float64) UserQuerySet {
	return qs.w(qs.db.Where("earn_with_partners_usd != ?", earnWithPartnersUSD))
}

// EarnWithPartnersUSDNotIn is an autogenerated method
// nolint: dupl
func (qs UserQuerySet) EarnWithPartnersUSDNotIn(earnWithPartnersUSD float64, earnWithPartnersUSDRest ...float64) UserQuerySet {
	iArgs := []interface{}{earnWithPartnersUSD}
	for _, arg := range earnWithPartnersUSDRest {
		iArgs = append(iArgs, arg)
	}
	return qs.w(qs.db.Where("earn_with_partners_usd NOT IN (?)", iArgs))
}

// GetUpdater is an autogenerated method
// nolint: dupl
func (qs UserQuerySet) GetUpdater() UserUpdater {
	return NewUserUpdater(qs.db)
}

// IDEq is an autogenerated method
// nolint: dupl
func (qs UserQuerySet) IDEq(ID uint) UserQuerySet {
	return qs.w(qs.db.Where("id = ?", ID))
}

// IDGt is an autogenerated method
// nolint: dupl
func (qs UserQuerySet) IDGt(ID uint) UserQuerySet {
	return qs.w(qs.db.Where("id > ?", ID))
}

// IDGte is an autogenerated method
// nolint: dupl
func (qs UserQuerySet) IDGte(ID uint) UserQuerySet {
	return qs.w(qs.db.Where("id >= ?", ID))
}

// IDIn is an autogenerated method
// nolint: dupl
func (qs UserQuerySet) IDIn(ID uint, IDRest ...uint) UserQuerySet {
	iArgs := []interface{}{ID}
	for _, arg := range IDRest {
		iArgs = append(iArgs, arg)
	}
	return qs.w(qs.db.Where("id IN (?)", iArgs))
}

// IDLt is an autogenerated method
// nolint: dupl
func (qs UserQuerySet) IDLt(ID uint) UserQuerySet {
	return qs.w(qs.db.Where("id < ?", ID))
}

// IDLte is an autogenerated method
// nolint: dupl
func (qs UserQuerySet) IDLte(ID uint) UserQuerySet {
	return qs.w(qs.db.Where("id <= ?", ID))
}

// IDNe is an autogenerated method
// nolint: dupl
func (qs UserQuerySet) IDNe(ID uint) UserQuerySet {
	return qs.w(qs.db.Where("id != ?", ID))
}

// IDNotIn is an autogenerated method
// nolint: dupl
func (qs UserQuerySet) IDNotIn(ID uint, IDRest ...uint) UserQuerySet {
	iArgs := []interface{}{ID}
	for _, arg := range IDRest {
		iArgs = append(iArgs, arg)
	}
	return qs.w(qs.db.Where("id NOT IN (?)", iArgs))
}

// LangEq is an autogenerated method
// nolint: dupl
func (qs UserQuerySet) LangEq(lang int) UserQuerySet {
	return qs.w(qs.db.Where("lang = ?", lang))
}

// LangGt is an autogenerated method
// nolint: dupl
func (qs UserQuerySet) LangGt(lang int) UserQuerySet {
	return qs.w(qs.db.Where("lang > ?", lang))
}

// LangGte is an autogenerated method
// nolint: dupl
func (qs UserQuerySet) LangGte(lang int) UserQuerySet {
	return qs.w(qs.db.Where("lang >= ?", lang))
}

// LangIn is an autogenerated method
// nolint: dupl
func (qs UserQuerySet) LangIn(lang int, langRest ...int) UserQuerySet {
	iArgs := []interface{}{lang}
	for _, arg := range langRest {
		iArgs = append(iArgs, arg)
	}
	return qs.w(qs.db.Where("lang IN (?)", iArgs))
}

// LangLt is an autogenerated method
// nolint: dupl
func (qs UserQuerySet) LangLt(lang int) UserQuerySet {
	return qs.w(qs.db.Where("lang < ?", lang))
}

// LangLte is an autogenerated method
// nolint: dupl
func (qs UserQuerySet) LangLte(lang int) UserQuerySet {
	return qs.w(qs.db.Where("lang <= ?", lang))
}

// LangNe is an autogenerated method
// nolint: dupl
func (qs UserQuerySet) LangNe(lang int) UserQuerySet {
	return qs.w(qs.db.Where("lang != ?", lang))
}

// LangNotIn is an autogenerated method
// nolint: dupl
func (qs UserQuerySet) LangNotIn(lang int, langRest ...int) UserQuerySet {
	iArgs := []interface{}{lang}
	for _, arg := range langRest {
		iArgs = append(iArgs, arg)
	}
	return qs.w(qs.db.Where("lang NOT IN (?)", iArgs))
}

// LastReceivedProfitAtEq is an autogenerated method
// nolint: dupl
func (qs UserQuerySet) LastReceivedProfitAtEq(lastReceivedProfitAt time.Time) UserQuerySet {
	return qs.w(qs.db.Where("last_received_profit_at = ?", lastReceivedProfitAt))
}

// LastReceivedProfitAtGt is an autogenerated method
// nolint: dupl
func (qs UserQuerySet) LastReceivedProfitAtGt(lastReceivedProfitAt time.Time) UserQuerySet {
	return qs.w(qs.db.Where("last_received_profit_at > ?", lastReceivedProfitAt))
}

// LastReceivedProfitAtGte is an autogenerated method
// nolint: dupl
func (qs UserQuerySet) LastReceivedProfitAtGte(lastReceivedProfitAt time.Time) UserQuerySet {
	return qs.w(qs.db.Where("last_received_profit_at >= ?", lastReceivedProfitAt))
}

// LastReceivedProfitAtLt is an autogenerated method
// nolint: dupl
func (qs UserQuerySet) LastReceivedProfitAtLt(lastReceivedProfitAt time.Time) UserQuerySet {
	return qs.w(qs.db.Where("last_received_profit_at < ?", lastReceivedProfitAt))
}

// LastReceivedProfitAtLte is an autogenerated method
// nolint: dupl
func (qs UserQuerySet) LastReceivedProfitAtLte(lastReceivedProfitAt time.Time) UserQuerySet {
	return qs.w(qs.db.Where("last_received_profit_at <= ?", lastReceivedProfitAt))
}

// LastReceivedProfitAtNe is an autogenerated method
// nolint: dupl
func (qs UserQuerySet) LastReceivedProfitAtNe(lastReceivedProfitAt time.Time) UserQuerySet {
	return qs.w(qs.db.Where("last_received_profit_at != ?", lastReceivedProfitAt))
}

// Limit is an autogenerated method
// nolint: dupl
func (qs UserQuerySet) Limit(limit int) UserQuerySet {
	return qs.w(qs.db.Limit(limit))
}

// NameEq is an autogenerated method
// nolint: dupl
func (qs UserQuerySet) NameEq(name string) UserQuerySet {
	return qs.w(qs.db.Where("name = ?", name))
}

// NameIn is an autogenerated method
// nolint: dupl
func (qs UserQuerySet) NameIn(name string, nameRest ...string) UserQuerySet {
	iArgs := []interface{}{name}
	for _, arg := range nameRest {
		iArgs = append(iArgs, arg)
	}
	return qs.w(qs.db.Where("name IN (?)", iArgs))
}

// NameNe is an autogenerated method
// nolint: dupl
func (qs UserQuerySet) NameNe(name string) UserQuerySet {
	return qs.w(qs.db.Where("name != ?", name))
}

// NameNotIn is an autogenerated method
// nolint: dupl
func (qs UserQuerySet) NameNotIn(name string, nameRest ...string) UserQuerySet {
	iArgs := []interface{}{name}
	for _, arg := range nameRest {
		iArgs = append(iArgs, arg)
	}
	return qs.w(qs.db.Where("name NOT IN (?)", iArgs))
}

// One is used to retrieve one result. It returns gorm.ErrRecordNotFound
// if nothing was fetched
func (qs UserQuerySet) One(ret *User) error {
	return qs.db.First(ret).Error
}

// OrderAscByCreatedAt is an autogenerated method
// nolint: dupl
func (qs UserQuerySet) OrderAscByCreatedAt() UserQuerySet {
	return qs.w(qs.db.Order("created_at ASC"))
}

// OrderAscByDeletedAt is an autogenerated method
// nolint: dupl
func (qs UserQuerySet) OrderAscByDeletedAt() UserQuerySet {
	return qs.w(qs.db.Order("deleted_at ASC"))
}

// OrderAscByEarnBTC is an autogenerated method
// nolint: dupl
func (qs UserQuerySet) OrderAscByEarnBTC() UserQuerySet {
	return qs.w(qs.db.Order("earn_btc ASC"))
}

// OrderAscByEarnUSD is an autogenerated method
// nolint: dupl
func (qs UserQuerySet) OrderAscByEarnUSD() UserQuerySet {
	return qs.w(qs.db.Order("earn_usd ASC"))
}

// OrderAscByEarnWithPartnersBTC is an autogenerated method
// nolint: dupl
func (qs UserQuerySet) OrderAscByEarnWithPartnersBTC() UserQuerySet {
	return qs.w(qs.db.Order("earn_with_partners_btc ASC"))
}

// OrderAscByEarnWithPartnersUSD is an autogenerated method
// nolint: dupl
func (qs UserQuerySet) OrderAscByEarnWithPartnersUSD() UserQuerySet {
	return qs.w(qs.db.Order("earn_with_partners_usd ASC"))
}

// OrderAscByID is an autogenerated method
// nolint: dupl
func (qs UserQuerySet) OrderAscByID() UserQuerySet {
	return qs.w(qs.db.Order("id ASC"))
}

// OrderAscByLang is an autogenerated method
// nolint: dupl
func (qs UserQuerySet) OrderAscByLang() UserQuerySet {
	return qs.w(qs.db.Order("lang ASC"))
}

// OrderAscByLastReceivedProfitAt is an autogenerated method
// nolint: dupl
func (qs UserQuerySet) OrderAscByLastReceivedProfitAt() UserQuerySet {
	return qs.w(qs.db.Order("last_received_profit_at ASC"))
}

// OrderAscByRef1 is an autogenerated method
// nolint: dupl
func (qs UserQuerySet) OrderAscByRef1() UserQuerySet {
	return qs.w(qs.db.Order("ref1 ASC"))
}

// OrderAscByRef2 is an autogenerated method
// nolint: dupl
func (qs UserQuerySet) OrderAscByRef2() UserQuerySet {
	return qs.w(qs.db.Order("ref2 ASC"))
}

// OrderAscByRef3 is an autogenerated method
// nolint: dupl
func (qs UserQuerySet) OrderAscByRef3() UserQuerySet {
	return qs.w(qs.db.Order("ref3 ASC"))
}

// OrderAscByRef4 is an autogenerated method
// nolint: dupl
func (qs UserQuerySet) OrderAscByRef4() UserQuerySet {
	return qs.w(qs.db.Order("ref4 ASC"))
}

// OrderAscByRef5 is an autogenerated method
// nolint: dupl
func (qs UserQuerySet) OrderAscByRef5() UserQuerySet {
	return qs.w(qs.db.Order("ref5 ASC"))
}

// OrderAscByRole is an autogenerated method
// nolint: dupl
func (qs UserQuerySet) OrderAscByRole() UserQuerySet {
	return qs.w(qs.db.Order("role ASC"))
}

// OrderAscByUpdatedAt is an autogenerated method
// nolint: dupl
func (qs UserQuerySet) OrderAscByUpdatedAt() UserQuerySet {
	return qs.w(qs.db.Order("updated_at ASC"))
}

// OrderDescByCreatedAt is an autogenerated method
// nolint: dupl
func (qs UserQuerySet) OrderDescByCreatedAt() UserQuerySet {
	return qs.w(qs.db.Order("created_at DESC"))
}

// OrderDescByDeletedAt is an autogenerated method
// nolint: dupl
func (qs UserQuerySet) OrderDescByDeletedAt() UserQuerySet {
	return qs.w(qs.db.Order("deleted_at DESC"))
}

// OrderDescByEarnBTC is an autogenerated method
// nolint: dupl
func (qs UserQuerySet) OrderDescByEarnBTC() UserQuerySet {
	return qs.w(qs.db.Order("earn_btc DESC"))
}

// OrderDescByEarnUSD is an autogenerated method
// nolint: dupl
func (qs UserQuerySet) OrderDescByEarnUSD() UserQuerySet {
	return qs.w(qs.db.Order("earn_usd DESC"))
}

// OrderDescByEarnWithPartnersBTC is an autogenerated method
// nolint: dupl
func (qs UserQuerySet) OrderDescByEarnWithPartnersBTC() UserQuerySet {
	return qs.w(qs.db.Order("earn_with_partners_btc DESC"))
}

// OrderDescByEarnWithPartnersUSD is an autogenerated method
// nolint: dupl
func (qs UserQuerySet) OrderDescByEarnWithPartnersUSD() UserQuerySet {
	return qs.w(qs.db.Order("earn_with_partners_usd DESC"))
}

// OrderDescByID is an autogenerated method
// nolint: dupl
func (qs UserQuerySet) OrderDescByID() UserQuerySet {
	return qs.w(qs.db.Order("id DESC"))
}

// OrderDescByLang is an autogenerated method
// nolint: dupl
func (qs UserQuerySet) OrderDescByLang() UserQuerySet {
	return qs.w(qs.db.Order("lang DESC"))
}

// OrderDescByLastReceivedProfitAt is an autogenerated method
// nolint: dupl
func (qs UserQuerySet) OrderDescByLastReceivedProfitAt() UserQuerySet {
	return qs.w(qs.db.Order("last_received_profit_at DESC"))
}

// OrderDescByRef1 is an autogenerated method
// nolint: dupl
func (qs UserQuerySet) OrderDescByRef1() UserQuerySet {
	return qs.w(qs.db.Order("ref1 DESC"))
}

// OrderDescByRef2 is an autogenerated method
// nolint: dupl
func (qs UserQuerySet) OrderDescByRef2() UserQuerySet {
	return qs.w(qs.db.Order("ref2 DESC"))
}

// OrderDescByRef3 is an autogenerated method
// nolint: dupl
func (qs UserQuerySet) OrderDescByRef3() UserQuerySet {
	return qs.w(qs.db.Order("ref3 DESC"))
}

// OrderDescByRef4 is an autogenerated method
// nolint: dupl
func (qs UserQuerySet) OrderDescByRef4() UserQuerySet {
	return qs.w(qs.db.Order("ref4 DESC"))
}

// OrderDescByRef5 is an autogenerated method
// nolint: dupl
func (qs UserQuerySet) OrderDescByRef5() UserQuerySet {
	return qs.w(qs.db.Order("ref5 DESC"))
}

// OrderDescByRole is an autogenerated method
// nolint: dupl
func (qs UserQuerySet) OrderDescByRole() UserQuerySet {
	return qs.w(qs.db.Order("role DESC"))
}

// OrderDescByUpdatedAt is an autogenerated method
// nolint: dupl
func (qs UserQuerySet) OrderDescByUpdatedAt() UserQuerySet {
	return qs.w(qs.db.Order("updated_at DESC"))
}

// PaidEq is an autogenerated method
// nolint: dupl
func (qs UserQuerySet) PaidEq(paid bool) UserQuerySet {
	return qs.w(qs.db.Where("paid = ?", paid))
}

// PaidIn is an autogenerated method
// nolint: dupl
func (qs UserQuerySet) PaidIn(paid bool, paidRest ...bool) UserQuerySet {
	iArgs := []interface{}{paid}
	for _, arg := range paidRest {
		iArgs = append(iArgs, arg)
	}
	return qs.w(qs.db.Where("paid IN (?)", iArgs))
}

// PaidNe is an autogenerated method
// nolint: dupl
func (qs UserQuerySet) PaidNe(paid bool) UserQuerySet {
	return qs.w(qs.db.Where("paid != ?", paid))
}

// PaidNotIn is an autogenerated method
// nolint: dupl
func (qs UserQuerySet) PaidNotIn(paid bool, paidRest ...bool) UserQuerySet {
	iArgs := []interface{}{paid}
	for _, arg := range paidRest {
		iArgs = append(iArgs, arg)
	}
	return qs.w(qs.db.Where("paid NOT IN (?)", iArgs))
}

// Ref1Eq is an autogenerated method
// nolint: dupl
func (qs UserQuerySet) Ref1Eq(ref1 uint) UserQuerySet {
	return qs.w(qs.db.Where("ref1 = ?", ref1))
}

// Ref1Gt is an autogenerated method
// nolint: dupl
func (qs UserQuerySet) Ref1Gt(ref1 uint) UserQuerySet {
	return qs.w(qs.db.Where("ref1 > ?", ref1))
}

// Ref1Gte is an autogenerated method
// nolint: dupl
func (qs UserQuerySet) Ref1Gte(ref1 uint) UserQuerySet {
	return qs.w(qs.db.Where("ref1 >= ?", ref1))
}

// Ref1In is an autogenerated method
// nolint: dupl
func (qs UserQuerySet) Ref1In(ref1 uint, ref1Rest ...uint) UserQuerySet {
	iArgs := []interface{}{ref1}
	for _, arg := range ref1Rest {
		iArgs = append(iArgs, arg)
	}
	return qs.w(qs.db.Where("ref1 IN (?)", iArgs))
}

// Ref1Lt is an autogenerated method
// nolint: dupl
func (qs UserQuerySet) Ref1Lt(ref1 uint) UserQuerySet {
	return qs.w(qs.db.Where("ref1 < ?", ref1))
}

// Ref1Lte is an autogenerated method
// nolint: dupl
func (qs UserQuerySet) Ref1Lte(ref1 uint) UserQuerySet {
	return qs.w(qs.db.Where("ref1 <= ?", ref1))
}

// Ref1Ne is an autogenerated method
// nolint: dupl
func (qs UserQuerySet) Ref1Ne(ref1 uint) UserQuerySet {
	return qs.w(qs.db.Where("ref1 != ?", ref1))
}

// Ref1NotIn is an autogenerated method
// nolint: dupl
func (qs UserQuerySet) Ref1NotIn(ref1 uint, ref1Rest ...uint) UserQuerySet {
	iArgs := []interface{}{ref1}
	for _, arg := range ref1Rest {
		iArgs = append(iArgs, arg)
	}
	return qs.w(qs.db.Where("ref1 NOT IN (?)", iArgs))
}

// Ref2Eq is an autogenerated method
// nolint: dupl
func (qs UserQuerySet) Ref2Eq(ref2 uint) UserQuerySet {
	return qs.w(qs.db.Where("ref2 = ?", ref2))
}

// Ref2Gt is an autogenerated method
// nolint: dupl
func (qs UserQuerySet) Ref2Gt(ref2 uint) UserQuerySet {
	return qs.w(qs.db.Where("ref2 > ?", ref2))
}

// Ref2Gte is an autogenerated method
// nolint: dupl
func (qs UserQuerySet) Ref2Gte(ref2 uint) UserQuerySet {
	return qs.w(qs.db.Where("ref2 >= ?", ref2))
}

// Ref2In is an autogenerated method
// nolint: dupl
func (qs UserQuerySet) Ref2In(ref2 uint, ref2Rest ...uint) UserQuerySet {
	iArgs := []interface{}{ref2}
	for _, arg := range ref2Rest {
		iArgs = append(iArgs, arg)
	}
	return qs.w(qs.db.Where("ref2 IN (?)", iArgs))
}

// Ref2Lt is an autogenerated method
// nolint: dupl
func (qs UserQuerySet) Ref2Lt(ref2 uint) UserQuerySet {
	return qs.w(qs.db.Where("ref2 < ?", ref2))
}

// Ref2Lte is an autogenerated method
// nolint: dupl
func (qs UserQuerySet) Ref2Lte(ref2 uint) UserQuerySet {
	return qs.w(qs.db.Where("ref2 <= ?", ref2))
}

// Ref2Ne is an autogenerated method
// nolint: dupl
func (qs UserQuerySet) Ref2Ne(ref2 uint) UserQuerySet {
	return qs.w(qs.db.Where("ref2 != ?", ref2))
}

// Ref2NotIn is an autogenerated method
// nolint: dupl
func (qs UserQuerySet) Ref2NotIn(ref2 uint, ref2Rest ...uint) UserQuerySet {
	iArgs := []interface{}{ref2}
	for _, arg := range ref2Rest {
		iArgs = append(iArgs, arg)
	}
	return qs.w(qs.db.Where("ref2 NOT IN (?)", iArgs))
}

// Ref3Eq is an autogenerated method
// nolint: dupl
func (qs UserQuerySet) Ref3Eq(ref3 uint) UserQuerySet {
	return qs.w(qs.db.Where("ref3 = ?", ref3))
}

// Ref3Gt is an autogenerated method
// nolint: dupl
func (qs UserQuerySet) Ref3Gt(ref3 uint) UserQuerySet {
	return qs.w(qs.db.Where("ref3 > ?", ref3))
}

// Ref3Gte is an autogenerated method
// nolint: dupl
func (qs UserQuerySet) Ref3Gte(ref3 uint) UserQuerySet {
	return qs.w(qs.db.Where("ref3 >= ?", ref3))
}

// Ref3In is an autogenerated method
// nolint: dupl
func (qs UserQuerySet) Ref3In(ref3 uint, ref3Rest ...uint) UserQuerySet {
	iArgs := []interface{}{ref3}
	for _, arg := range ref3Rest {
		iArgs = append(iArgs, arg)
	}
	return qs.w(qs.db.Where("ref3 IN (?)", iArgs))
}

// Ref3Lt is an autogenerated method
// nolint: dupl
func (qs UserQuerySet) Ref3Lt(ref3 uint) UserQuerySet {
	return qs.w(qs.db.Where("ref3 < ?", ref3))
}

// Ref3Lte is an autogenerated method
// nolint: dupl
func (qs UserQuerySet) Ref3Lte(ref3 uint) UserQuerySet {
	return qs.w(qs.db.Where("ref3 <= ?", ref3))
}

// Ref3Ne is an autogenerated method
// nolint: dupl
func (qs UserQuerySet) Ref3Ne(ref3 uint) UserQuerySet {
	return qs.w(qs.db.Where("ref3 != ?", ref3))
}

// Ref3NotIn is an autogenerated method
// nolint: dupl
func (qs UserQuerySet) Ref3NotIn(ref3 uint, ref3Rest ...uint) UserQuerySet {
	iArgs := []interface{}{ref3}
	for _, arg := range ref3Rest {
		iArgs = append(iArgs, arg)
	}
	return qs.w(qs.db.Where("ref3 NOT IN (?)", iArgs))
}

// Ref4Eq is an autogenerated method
// nolint: dupl
func (qs UserQuerySet) Ref4Eq(ref4 uint) UserQuerySet {
	return qs.w(qs.db.Where("ref4 = ?", ref4))
}

// Ref4Gt is an autogenerated method
// nolint: dupl
func (qs UserQuerySet) Ref4Gt(ref4 uint) UserQuerySet {
	return qs.w(qs.db.Where("ref4 > ?", ref4))
}

// Ref4Gte is an autogenerated method
// nolint: dupl
func (qs UserQuerySet) Ref4Gte(ref4 uint) UserQuerySet {
	return qs.w(qs.db.Where("ref4 >= ?", ref4))
}

// Ref4In is an autogenerated method
// nolint: dupl
func (qs UserQuerySet) Ref4In(ref4 uint, ref4Rest ...uint) UserQuerySet {
	iArgs := []interface{}{ref4}
	for _, arg := range ref4Rest {
		iArgs = append(iArgs, arg)
	}
	return qs.w(qs.db.Where("ref4 IN (?)", iArgs))
}

// Ref4Lt is an autogenerated method
// nolint: dupl
func (qs UserQuerySet) Ref4Lt(ref4 uint) UserQuerySet {
	return qs.w(qs.db.Where("ref4 < ?", ref4))
}

// Ref4Lte is an autogenerated method
// nolint: dupl
func (qs UserQuerySet) Ref4Lte(ref4 uint) UserQuerySet {
	return qs.w(qs.db.Where("ref4 <= ?", ref4))
}

// Ref4Ne is an autogenerated method
// nolint: dupl
func (qs UserQuerySet) Ref4Ne(ref4 uint) UserQuerySet {
	return qs.w(qs.db.Where("ref4 != ?", ref4))
}

// Ref4NotIn is an autogenerated method
// nolint: dupl
func (qs UserQuerySet) Ref4NotIn(ref4 uint, ref4Rest ...uint) UserQuerySet {
	iArgs := []interface{}{ref4}
	for _, arg := range ref4Rest {
		iArgs = append(iArgs, arg)
	}
	return qs.w(qs.db.Where("ref4 NOT IN (?)", iArgs))
}

// Ref5Eq is an autogenerated method
// nolint: dupl
func (qs UserQuerySet) Ref5Eq(ref5 uint) UserQuerySet {
	return qs.w(qs.db.Where("ref5 = ?", ref5))
}

// Ref5Gt is an autogenerated method
// nolint: dupl
func (qs UserQuerySet) Ref5Gt(ref5 uint) UserQuerySet {
	return qs.w(qs.db.Where("ref5 > ?", ref5))
}

// Ref5Gte is an autogenerated method
// nolint: dupl
func (qs UserQuerySet) Ref5Gte(ref5 uint) UserQuerySet {
	return qs.w(qs.db.Where("ref5 >= ?", ref5))
}

// Ref5In is an autogenerated method
// nolint: dupl
func (qs UserQuerySet) Ref5In(ref5 uint, ref5Rest ...uint) UserQuerySet {
	iArgs := []interface{}{ref5}
	for _, arg := range ref5Rest {
		iArgs = append(iArgs, arg)
	}
	return qs.w(qs.db.Where("ref5 IN (?)", iArgs))
}

// Ref5Lt is an autogenerated method
// nolint: dupl
func (qs UserQuerySet) Ref5Lt(ref5 uint) UserQuerySet {
	return qs.w(qs.db.Where("ref5 < ?", ref5))
}

// Ref5Lte is an autogenerated method
// nolint: dupl
func (qs UserQuerySet) Ref5Lte(ref5 uint) UserQuerySet {
	return qs.w(qs.db.Where("ref5 <= ?", ref5))
}

// Ref5Ne is an autogenerated method
// nolint: dupl
func (qs UserQuerySet) Ref5Ne(ref5 uint) UserQuerySet {
	return qs.w(qs.db.Where("ref5 != ?", ref5))
}

// Ref5NotIn is an autogenerated method
// nolint: dupl
func (qs UserQuerySet) Ref5NotIn(ref5 uint, ref5Rest ...uint) UserQuerySet {
	iArgs := []interface{}{ref5}
	for _, arg := range ref5Rest {
		iArgs = append(iArgs, arg)
	}
	return qs.w(qs.db.Where("ref5 NOT IN (?)", iArgs))
}

// RoleEq is an autogenerated method
// nolint: dupl
func (qs UserQuerySet) RoleEq(role Role) UserQuerySet {
	return qs.w(qs.db.Where("role = ?", role))
}

// RoleGt is an autogenerated method
// nolint: dupl
func (qs UserQuerySet) RoleGt(role Role) UserQuerySet {
	return qs.w(qs.db.Where("role > ?", role))
}

// RoleGte is an autogenerated method
// nolint: dupl
func (qs UserQuerySet) RoleGte(role Role) UserQuerySet {
	return qs.w(qs.db.Where("role >= ?", role))
}

// RoleIn is an autogenerated method
// nolint: dupl
func (qs UserQuerySet) RoleIn(role Role, roleRest ...Role) UserQuerySet {
	iArgs := []interface{}{role}
	for _, arg := range roleRest {
		iArgs = append(iArgs, arg)
	}
	return qs.w(qs.db.Where("role IN (?)", iArgs))
}

// RoleLt is an autogenerated method
// nolint: dupl
func (qs UserQuerySet) RoleLt(role Role) UserQuerySet {
	return qs.w(qs.db.Where("role < ?", role))
}

// RoleLte is an autogenerated method
// nolint: dupl
func (qs UserQuerySet) RoleLte(role Role) UserQuerySet {
	return qs.w(qs.db.Where("role <= ?", role))
}

// RoleNe is an autogenerated method
// nolint: dupl
func (qs UserQuerySet) RoleNe(role Role) UserQuerySet {
	return qs.w(qs.db.Where("role != ?", role))
}

// RoleNotIn is an autogenerated method
// nolint: dupl
func (qs UserQuerySet) RoleNotIn(role Role, roleRest ...Role) UserQuerySet {
	iArgs := []interface{}{role}
	for _, arg := range roleRest {
		iArgs = append(iArgs, arg)
	}
	return qs.w(qs.db.Where("role NOT IN (?)", iArgs))
}

// SetCreatedAt is an autogenerated method
// nolint: dupl
func (u UserUpdater) SetCreatedAt(createdAt time.Time) UserUpdater {
	u.fields[string(UserDBSchema.CreatedAt)] = createdAt
	return u
}

// SetDeletedAt is an autogenerated method
// nolint: dupl
func (u UserUpdater) SetDeletedAt(deletedAt *time.Time) UserUpdater {
	u.fields[string(UserDBSchema.DeletedAt)] = deletedAt
	return u
}

// SetDepositWallet is an autogenerated method
// nolint: dupl
func (u UserUpdater) SetDepositWallet(depositWallet string) UserUpdater {
	u.fields[string(UserDBSchema.DepositWallet)] = depositWallet
	return u
}

// SetEarnBTC is an autogenerated method
// nolint: dupl
func (u UserUpdater) SetEarnBTC(earnBTC float64) UserUpdater {
	u.fields[string(UserDBSchema.EarnBTC)] = earnBTC
	return u
}

// SetEarnUSD is an autogenerated method
// nolint: dupl
func (u UserUpdater) SetEarnUSD(earnUSD float64) UserUpdater {
	u.fields[string(UserDBSchema.EarnUSD)] = earnUSD
	return u
}

// SetEarnWithPartnersBTC is an autogenerated method
// nolint: dupl
func (u UserUpdater) SetEarnWithPartnersBTC(earnWithPartnersBTC float64) UserUpdater {
	u.fields[string(UserDBSchema.EarnWithPartnersBTC)] = earnWithPartnersBTC
	return u
}

// SetEarnWithPartnersUSD is an autogenerated method
// nolint: dupl
func (u UserUpdater) SetEarnWithPartnersUSD(earnWithPartnersUSD float64) UserUpdater {
	u.fields[string(UserDBSchema.EarnWithPartnersUSD)] = earnWithPartnersUSD
	return u
}

// SetID is an autogenerated method
// nolint: dupl
func (u UserUpdater) SetID(ID uint) UserUpdater {
	u.fields[string(UserDBSchema.ID)] = ID
	return u
}

// SetLang is an autogenerated method
// nolint: dupl
func (u UserUpdater) SetLang(lang int) UserUpdater {
	u.fields[string(UserDBSchema.Lang)] = lang
	return u
}

// SetLastReceivedProfitAt is an autogenerated method
// nolint: dupl
func (u UserUpdater) SetLastReceivedProfitAt(lastReceivedProfitAt time.Time) UserUpdater {
	u.fields[string(UserDBSchema.LastReceivedProfitAt)] = lastReceivedProfitAt
	return u
}

// SetName is an autogenerated method
// nolint: dupl
func (u UserUpdater) SetName(name string) UserUpdater {
	u.fields[string(UserDBSchema.Name)] = name
	return u
}

// SetPaid is an autogenerated method
// nolint: dupl
func (u UserUpdater) SetPaid(paid bool) UserUpdater {
	u.fields[string(UserDBSchema.Paid)] = paid
	return u
}

// SetRef1 is an autogenerated method
// nolint: dupl
func (u UserUpdater) SetRef1(ref1 uint) UserUpdater {
	u.fields[string(UserDBSchema.Ref1)] = ref1
	return u
}

// SetRef2 is an autogenerated method
// nolint: dupl
func (u UserUpdater) SetRef2(ref2 uint) UserUpdater {
	u.fields[string(UserDBSchema.Ref2)] = ref2
	return u
}

// SetRef3 is an autogenerated method
// nolint: dupl
func (u UserUpdater) SetRef3(ref3 uint) UserUpdater {
	u.fields[string(UserDBSchema.Ref3)] = ref3
	return u
}

// SetRef4 is an autogenerated method
// nolint: dupl
func (u UserUpdater) SetRef4(ref4 uint) UserUpdater {
	u.fields[string(UserDBSchema.Ref4)] = ref4
	return u
}

// SetRef5 is an autogenerated method
// nolint: dupl
func (u UserUpdater) SetRef5(ref5 uint) UserUpdater {
	u.fields[string(UserDBSchema.Ref5)] = ref5
	return u
}

// SetRole is an autogenerated method
// nolint: dupl
func (u UserUpdater) SetRole(role Role) UserUpdater {
	u.fields[string(UserDBSchema.Role)] = role
	return u
}

// SetUpdatedAt is an autogenerated method
// nolint: dupl
func (u UserUpdater) SetUpdatedAt(updatedAt time.Time) UserUpdater {
	u.fields[string(UserDBSchema.UpdatedAt)] = updatedAt
	return u
}

// SetWithdrawWallet is an autogenerated method
// nolint: dupl
func (u UserUpdater) SetWithdrawWallet(withdrawWallet string) UserUpdater {
	u.fields[string(UserDBSchema.WithdrawWallet)] = withdrawWallet
	return u
}

// Update is an autogenerated method
// nolint: dupl
func (u UserUpdater) Update() error {
	return u.db.Updates(u.fields).Error
}

// UpdateNum is an autogenerated method
// nolint: dupl
func (u UserUpdater) UpdateNum() (int64, error) {
	db := u.db.Updates(u.fields)
	return db.RowsAffected, db.Error
}

// UpdatedAtEq is an autogenerated method
// nolint: dupl
func (qs UserQuerySet) UpdatedAtEq(updatedAt time.Time) UserQuerySet {
	return qs.w(qs.db.Where("updated_at = ?", updatedAt))
}

// UpdatedAtGt is an autogenerated method
// nolint: dupl
func (qs UserQuerySet) UpdatedAtGt(updatedAt time.Time) UserQuerySet {
	return qs.w(qs.db.Where("updated_at > ?", updatedAt))
}

// UpdatedAtGte is an autogenerated method
// nolint: dupl
func (qs UserQuerySet) UpdatedAtGte(updatedAt time.Time) UserQuerySet {
	return qs.w(qs.db.Where("updated_at >= ?", updatedAt))
}

// UpdatedAtLt is an autogenerated method
// nolint: dupl
func (qs UserQuerySet) UpdatedAtLt(updatedAt time.Time) UserQuerySet {
	return qs.w(qs.db.Where("updated_at < ?", updatedAt))
}

// UpdatedAtLte is an autogenerated method
// nolint: dupl
func (qs UserQuerySet) UpdatedAtLte(updatedAt time.Time) UserQuerySet {
	return qs.w(qs.db.Where("updated_at <= ?", updatedAt))
}

// UpdatedAtNe is an autogenerated method
// nolint: dupl
func (qs UserQuerySet) UpdatedAtNe(updatedAt time.Time) UserQuerySet {
	return qs.w(qs.db.Where("updated_at != ?", updatedAt))
}

// WithdrawWalletEq is an autogenerated method
// nolint: dupl
func (qs UserQuerySet) WithdrawWalletEq(withdrawWallet string) UserQuerySet {
	return qs.w(qs.db.Where("withdraw_wallet = ?", withdrawWallet))
}

// WithdrawWalletIn is an autogenerated method
// nolint: dupl
func (qs UserQuerySet) WithdrawWalletIn(withdrawWallet string, withdrawWalletRest ...string) UserQuerySet {
	iArgs := []interface{}{withdrawWallet}
	for _, arg := range withdrawWalletRest {
		iArgs = append(iArgs, arg)
	}
	return qs.w(qs.db.Where("withdraw_wallet IN (?)", iArgs))
}

// WithdrawWalletNe is an autogenerated method
// nolint: dupl
func (qs UserQuerySet) WithdrawWalletNe(withdrawWallet string) UserQuerySet {
	return qs.w(qs.db.Where("withdraw_wallet != ?", withdrawWallet))
}

// WithdrawWalletNotIn is an autogenerated method
// nolint: dupl
func (qs UserQuerySet) WithdrawWalletNotIn(withdrawWallet string, withdrawWalletRest ...string) UserQuerySet {
	iArgs := []interface{}{withdrawWallet}
	for _, arg := range withdrawWalletRest {
		iArgs = append(iArgs, arg)
	}
	return qs.w(qs.db.Where("withdraw_wallet NOT IN (?)", iArgs))
}

// ===== END of query set UserQuerySet

// ===== BEGIN of User modifiers

type userDBSchemaField string

func (f userDBSchemaField) String() string {
	return string(f)
}

// UserDBSchema stores db field names of User
var UserDBSchema = struct {
	ID                   userDBSchemaField
	CreatedAt            userDBSchemaField
	UpdatedAt            userDBSchemaField
	DeletedAt            userDBSchemaField
	EarnUSD              userDBSchemaField
	EarnBTC              userDBSchemaField
	EarnWithPartnersUSD  userDBSchemaField
	EarnWithPartnersBTC  userDBSchemaField
	Lang                 userDBSchemaField
	Ref1                 userDBSchemaField
	Ref2                 userDBSchemaField
	Ref3                 userDBSchemaField
	Ref4                 userDBSchemaField
	Ref5                 userDBSchemaField
	DepositWallet        userDBSchemaField
	WithdrawWallet       userDBSchemaField
	Paid                 userDBSchemaField
	LastReceivedProfitAt userDBSchemaField
	Role                 userDBSchemaField
	Name                 userDBSchemaField
}{

	ID:                   userDBSchemaField("id"),
	CreatedAt:            userDBSchemaField("created_at"),
	UpdatedAt:            userDBSchemaField("updated_at"),
	DeletedAt:            userDBSchemaField("deleted_at"),
	EarnUSD:              userDBSchemaField("earn_usd"),
	EarnBTC:              userDBSchemaField("earn_btc"),
	EarnWithPartnersUSD:  userDBSchemaField("earn_with_partners_usd"),
	EarnWithPartnersBTC:  userDBSchemaField("earn_with_partners_btc"),
	Lang:                 userDBSchemaField("lang"),
	Ref1:                 userDBSchemaField("ref1"),
	Ref2:                 userDBSchemaField("ref2"),
	Ref3:                 userDBSchemaField("ref3"),
	Ref4:                 userDBSchemaField("ref4"),
	Ref5:                 userDBSchemaField("ref5"),
	DepositWallet:        userDBSchemaField("deposit_wallet"),
	WithdrawWallet:       userDBSchemaField("withdraw_wallet"),
	Paid:                 userDBSchemaField("paid"),
	LastReceivedProfitAt: userDBSchemaField("last_received_profit_at"),
	Role:                 userDBSchemaField("role"),
	Name:                 userDBSchemaField("name"),
}

// Update updates User fields by primary key
func (o *User) Update(db *gorm.DB, fields ...userDBSchemaField) error {
	dbNameToFieldName := map[string]interface{}{
		"id":                     o.ID,
		"created_at":             o.CreatedAt,
		"updated_at":             o.UpdatedAt,
		"deleted_at":             o.DeletedAt,
		"earn_usd":               o.EarnUSD,
		"earn_btc":               o.EarnBTC,
		"earn_with_partners_usd": o.EarnWithPartnersUSD,
		"earn_with_partners_btc": o.EarnWithPartnersBTC,
		"lang":            o.Lang,
		"ref1":            o.Ref1,
		"ref2":            o.Ref2,
		"ref3":            o.Ref3,
		"ref4":            o.Ref4,
		"ref5":            o.Ref5,
		"deposit_wallet":  o.DepositWallet,
		"withdraw_wallet": o.WithdrawWallet,
		"paid":            o.Paid,
		"last_received_profit_at": o.LastReceivedProfitAt,
		"role": o.Role,
		"name": o.Name,
	}
	u := map[string]interface{}{}
	for _, f := range fields {
		fs := f.String()
		u[fs] = dbNameToFieldName[fs]
	}
	if err := db.Model(o).Updates(u).Error; err != nil {
		if err == gorm.ErrRecordNotFound {
			return err
		}

		return fmt.Errorf("can't update User %v fields %v: %s",
			o, fields, err)
	}

	return nil
}

// UserUpdater is an User updates manager
type UserUpdater struct {
	fields map[string]interface{}
	db     *gorm.DB
}

// NewUserUpdater creates new User updater
func NewUserUpdater(db *gorm.DB) UserUpdater {
	return UserUpdater{
		fields: map[string]interface{}{},
		db:     db.Model(&User{}),
	}
}

// ===== END of User modifiers

// ===== END of all query sets
