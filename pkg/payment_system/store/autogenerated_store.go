package store

import (
	"fmt"
	"time"

	"github.com/jinzhu/gorm"
)

// ===== BEGIN of all query sets

// ===== BEGIN of query set TransactionQuerySet

// TransactionQuerySet is an queryset type for Transaction
type TransactionQuerySet struct {
	db *gorm.DB
}

// NewTransactionQuerySet constructs new TransactionQuerySet
func NewTransactionQuerySet(db *gorm.DB) TransactionQuerySet {
	return TransactionQuerySet{
		db: db.Model(&Transaction{}),
	}
}

func (qs TransactionQuerySet) w(db *gorm.DB) TransactionQuerySet {
	return NewTransactionQuerySet(db)
}

// All is an autogenerated method
// nolint: dupl
func (qs TransactionQuerySet) All(ret *[]Transaction) error {
	return qs.db.Find(ret).Error
}

// AmountEq is an autogenerated method
// nolint: dupl
func (qs TransactionQuerySet) AmountEq(amount uint) TransactionQuerySet {
	return qs.w(qs.db.Where("amount = ?", amount))
}

// AmountGt is an autogenerated method
// nolint: dupl
func (qs TransactionQuerySet) AmountGt(amount uint) TransactionQuerySet {
	return qs.w(qs.db.Where("amount > ?", amount))
}

// AmountGte is an autogenerated method
// nolint: dupl
func (qs TransactionQuerySet) AmountGte(amount uint) TransactionQuerySet {
	return qs.w(qs.db.Where("amount >= ?", amount))
}

// AmountIn is an autogenerated method
// nolint: dupl
func (qs TransactionQuerySet) AmountIn(amount uint, amountRest ...uint) TransactionQuerySet {
	iArgs := []interface{}{amount}
	for _, arg := range amountRest {
		iArgs = append(iArgs, arg)
	}
	return qs.w(qs.db.Where("amount IN (?)", iArgs))
}

// AmountLt is an autogenerated method
// nolint: dupl
func (qs TransactionQuerySet) AmountLt(amount uint) TransactionQuerySet {
	return qs.w(qs.db.Where("amount < ?", amount))
}

// AmountLte is an autogenerated method
// nolint: dupl
func (qs TransactionQuerySet) AmountLte(amount uint) TransactionQuerySet {
	return qs.w(qs.db.Where("amount <= ?", amount))
}

// AmountNe is an autogenerated method
// nolint: dupl
func (qs TransactionQuerySet) AmountNe(amount uint) TransactionQuerySet {
	return qs.w(qs.db.Where("amount != ?", amount))
}

// AmountNotIn is an autogenerated method
// nolint: dupl
func (qs TransactionQuerySet) AmountNotIn(amount uint, amountRest ...uint) TransactionQuerySet {
	iArgs := []interface{}{amount}
	for _, arg := range amountRest {
		iArgs = append(iArgs, arg)
	}
	return qs.w(qs.db.Where("amount NOT IN (?)", iArgs))
}

// Count is an autogenerated method
// nolint: dupl
func (qs TransactionQuerySet) Count() (int, error) {
	var count int
	err := qs.db.Count(&count).Error
	return count, err
}

// Create is an autogenerated method
// nolint: dupl
func (o *Transaction) Create(db *gorm.DB) error {
	return db.Create(o).Error
}

// CreatedAtEq is an autogenerated method
// nolint: dupl
func (qs TransactionQuerySet) CreatedAtEq(createdAt time.Time) TransactionQuerySet {
	return qs.w(qs.db.Where("created_at = ?", createdAt))
}

// CreatedAtGt is an autogenerated method
// nolint: dupl
func (qs TransactionQuerySet) CreatedAtGt(createdAt time.Time) TransactionQuerySet {
	return qs.w(qs.db.Where("created_at > ?", createdAt))
}

// CreatedAtGte is an autogenerated method
// nolint: dupl
func (qs TransactionQuerySet) CreatedAtGte(createdAt time.Time) TransactionQuerySet {
	return qs.w(qs.db.Where("created_at >= ?", createdAt))
}

// CreatedAtLt is an autogenerated method
// nolint: dupl
func (qs TransactionQuerySet) CreatedAtLt(createdAt time.Time) TransactionQuerySet {
	return qs.w(qs.db.Where("created_at < ?", createdAt))
}

// CreatedAtLte is an autogenerated method
// nolint: dupl
func (qs TransactionQuerySet) CreatedAtLte(createdAt time.Time) TransactionQuerySet {
	return qs.w(qs.db.Where("created_at <= ?", createdAt))
}

// CreatedAtNe is an autogenerated method
// nolint: dupl
func (qs TransactionQuerySet) CreatedAtNe(createdAt time.Time) TransactionQuerySet {
	return qs.w(qs.db.Where("created_at != ?", createdAt))
}

// CurrencyCodeEq is an autogenerated method
// nolint: dupl
func (qs TransactionQuerySet) CurrencyCodeEq(currencyCode string) TransactionQuerySet {
	return qs.w(qs.db.Where("currency_code = ?", currencyCode))
}

// CurrencyCodeIn is an autogenerated method
// nolint: dupl
func (qs TransactionQuerySet) CurrencyCodeIn(currencyCode string, currencyCodeRest ...string) TransactionQuerySet {
	iArgs := []interface{}{currencyCode}
	for _, arg := range currencyCodeRest {
		iArgs = append(iArgs, arg)
	}
	return qs.w(qs.db.Where("currency_code IN (?)", iArgs))
}

// CurrencyCodeNe is an autogenerated method
// nolint: dupl
func (qs TransactionQuerySet) CurrencyCodeNe(currencyCode string) TransactionQuerySet {
	return qs.w(qs.db.Where("currency_code != ?", currencyCode))
}

// CurrencyCodeNotIn is an autogenerated method
// nolint: dupl
func (qs TransactionQuerySet) CurrencyCodeNotIn(currencyCode string, currencyCodeRest ...string) TransactionQuerySet {
	iArgs := []interface{}{currencyCode}
	for _, arg := range currencyCodeRest {
		iArgs = append(iArgs, arg)
	}
	return qs.w(qs.db.Where("currency_code NOT IN (?)", iArgs))
}

// Delete is an autogenerated method
// nolint: dupl
func (qs TransactionQuerySet) Delete() error {
	return qs.db.Delete(Transaction{}).Error
}

// Delete is an autogenerated method
// nolint: dupl
func (o *Transaction) Delete(db *gorm.DB) error {
	return db.Delete(o).Error
}

// DeletedAtEq is an autogenerated method
// nolint: dupl
func (qs TransactionQuerySet) DeletedAtEq(deletedAt time.Time) TransactionQuerySet {
	return qs.w(qs.db.Where("deleted_at = ?", deletedAt))
}

// DeletedAtGt is an autogenerated method
// nolint: dupl
func (qs TransactionQuerySet) DeletedAtGt(deletedAt time.Time) TransactionQuerySet {
	return qs.w(qs.db.Where("deleted_at > ?", deletedAt))
}

// DeletedAtGte is an autogenerated method
// nolint: dupl
func (qs TransactionQuerySet) DeletedAtGte(deletedAt time.Time) TransactionQuerySet {
	return qs.w(qs.db.Where("deleted_at >= ?", deletedAt))
}

// DeletedAtIsNotNull is an autogenerated method
// nolint: dupl
func (qs TransactionQuerySet) DeletedAtIsNotNull() TransactionQuerySet {
	return qs.w(qs.db.Where("deleted_at IS NOT NULL"))
}

// DeletedAtIsNull is an autogenerated method
// nolint: dupl
func (qs TransactionQuerySet) DeletedAtIsNull() TransactionQuerySet {
	return qs.w(qs.db.Where("deleted_at IS NULL"))
}

// DeletedAtLt is an autogenerated method
// nolint: dupl
func (qs TransactionQuerySet) DeletedAtLt(deletedAt time.Time) TransactionQuerySet {
	return qs.w(qs.db.Where("deleted_at < ?", deletedAt))
}

// DeletedAtLte is an autogenerated method
// nolint: dupl
func (qs TransactionQuerySet) DeletedAtLte(deletedAt time.Time) TransactionQuerySet {
	return qs.w(qs.db.Where("deleted_at <= ?", deletedAt))
}

// DeletedAtNe is an autogenerated method
// nolint: dupl
func (qs TransactionQuerySet) DeletedAtNe(deletedAt time.Time) TransactionQuerySet {
	return qs.w(qs.db.Where("deleted_at != ?", deletedAt))
}

// ExternalIDEq is an autogenerated method
// nolint: dupl
func (qs TransactionQuerySet) ExternalIDEq(externalID string) TransactionQuerySet {
	return qs.w(qs.db.Where("external_id = ?", externalID))
}

// ExternalIDIn is an autogenerated method
// nolint: dupl
func (qs TransactionQuerySet) ExternalIDIn(externalID string, externalIDRest ...string) TransactionQuerySet {
	iArgs := []interface{}{externalID}
	for _, arg := range externalIDRest {
		iArgs = append(iArgs, arg)
	}
	return qs.w(qs.db.Where("external_id IN (?)", iArgs))
}

// ExternalIDNe is an autogenerated method
// nolint: dupl
func (qs TransactionQuerySet) ExternalIDNe(externalID string) TransactionQuerySet {
	return qs.w(qs.db.Where("external_id != ?", externalID))
}

// ExternalIDNotIn is an autogenerated method
// nolint: dupl
func (qs TransactionQuerySet) ExternalIDNotIn(externalID string, externalIDRest ...string) TransactionQuerySet {
	iArgs := []interface{}{externalID}
	for _, arg := range externalIDRest {
		iArgs = append(iArgs, arg)
	}
	return qs.w(qs.db.Where("external_id NOT IN (?)", iArgs))
}

// GetUpdater is an autogenerated method
// nolint: dupl
func (qs TransactionQuerySet) GetUpdater() TransactionUpdater {
	return NewTransactionUpdater(qs.db)
}

// IDEq is an autogenerated method
// nolint: dupl
func (qs TransactionQuerySet) IDEq(ID uint) TransactionQuerySet {
	return qs.w(qs.db.Where("id = ?", ID))
}

// IDGt is an autogenerated method
// nolint: dupl
func (qs TransactionQuerySet) IDGt(ID uint) TransactionQuerySet {
	return qs.w(qs.db.Where("id > ?", ID))
}

// IDGte is an autogenerated method
// nolint: dupl
func (qs TransactionQuerySet) IDGte(ID uint) TransactionQuerySet {
	return qs.w(qs.db.Where("id >= ?", ID))
}

// IDIn is an autogenerated method
// nolint: dupl
func (qs TransactionQuerySet) IDIn(ID uint, IDRest ...uint) TransactionQuerySet {
	iArgs := []interface{}{ID}
	for _, arg := range IDRest {
		iArgs = append(iArgs, arg)
	}
	return qs.w(qs.db.Where("id IN (?)", iArgs))
}

// IDLt is an autogenerated method
// nolint: dupl
func (qs TransactionQuerySet) IDLt(ID uint) TransactionQuerySet {
	return qs.w(qs.db.Where("id < ?", ID))
}

// IDLte is an autogenerated method
// nolint: dupl
func (qs TransactionQuerySet) IDLte(ID uint) TransactionQuerySet {
	return qs.w(qs.db.Where("id <= ?", ID))
}

// IDNe is an autogenerated method
// nolint: dupl
func (qs TransactionQuerySet) IDNe(ID uint) TransactionQuerySet {
	return qs.w(qs.db.Where("id != ?", ID))
}

// IDNotIn is an autogenerated method
// nolint: dupl
func (qs TransactionQuerySet) IDNotIn(ID uint, IDRest ...uint) TransactionQuerySet {
	iArgs := []interface{}{ID}
	for _, arg := range IDRest {
		iArgs = append(iArgs, arg)
	}
	return qs.w(qs.db.Where("id NOT IN (?)", iArgs))
}

// IncomingEq is an autogenerated method
// nolint: dupl
func (qs TransactionQuerySet) IncomingEq(incoming bool) TransactionQuerySet {
	return qs.w(qs.db.Where("incoming = ?", incoming))
}

// IncomingIn is an autogenerated method
// nolint: dupl
func (qs TransactionQuerySet) IncomingIn(incoming bool, incomingRest ...bool) TransactionQuerySet {
	iArgs := []interface{}{incoming}
	for _, arg := range incomingRest {
		iArgs = append(iArgs, arg)
	}
	return qs.w(qs.db.Where("incoming IN (?)", iArgs))
}

// IncomingNe is an autogenerated method
// nolint: dupl
func (qs TransactionQuerySet) IncomingNe(incoming bool) TransactionQuerySet {
	return qs.w(qs.db.Where("incoming != ?", incoming))
}

// IncomingNotIn is an autogenerated method
// nolint: dupl
func (qs TransactionQuerySet) IncomingNotIn(incoming bool, incomingRest ...bool) TransactionQuerySet {
	iArgs := []interface{}{incoming}
	for _, arg := range incomingRest {
		iArgs = append(iArgs, arg)
	}
	return qs.w(qs.db.Where("incoming NOT IN (?)", iArgs))
}

// Limit is an autogenerated method
// nolint: dupl
func (qs TransactionQuerySet) Limit(limit int) TransactionQuerySet {
	return qs.w(qs.db.Limit(limit))
}

// One is used to retrieve one result. It returns gorm.ErrRecordNotFound
// if nothing was fetched
func (qs TransactionQuerySet) One(ret *Transaction) error {
	return qs.db.First(ret).Error
}

// OrderAscByAmount is an autogenerated method
// nolint: dupl
func (qs TransactionQuerySet) OrderAscByAmount() TransactionQuerySet {
	return qs.w(qs.db.Order("amount ASC"))
}

// OrderAscByCreatedAt is an autogenerated method
// nolint: dupl
func (qs TransactionQuerySet) OrderAscByCreatedAt() TransactionQuerySet {
	return qs.w(qs.db.Order("created_at ASC"))
}

// OrderAscByDeletedAt is an autogenerated method
// nolint: dupl
func (qs TransactionQuerySet) OrderAscByDeletedAt() TransactionQuerySet {
	return qs.w(qs.db.Order("deleted_at ASC"))
}

// OrderAscByID is an autogenerated method
// nolint: dupl
func (qs TransactionQuerySet) OrderAscByID() TransactionQuerySet {
	return qs.w(qs.db.Order("id ASC"))
}

// OrderAscByStartedAt is an autogenerated method
// nolint: dupl
func (qs TransactionQuerySet) OrderAscByStartedAt() TransactionQuerySet {
	return qs.w(qs.db.Order("started_at ASC"))
}

// OrderAscByUpdatedAt is an autogenerated method
// nolint: dupl
func (qs TransactionQuerySet) OrderAscByUpdatedAt() TransactionQuerySet {
	return qs.w(qs.db.Order("updated_at ASC"))
}

// OrderDescByAmount is an autogenerated method
// nolint: dupl
func (qs TransactionQuerySet) OrderDescByAmount() TransactionQuerySet {
	return qs.w(qs.db.Order("amount DESC"))
}

// OrderDescByCreatedAt is an autogenerated method
// nolint: dupl
func (qs TransactionQuerySet) OrderDescByCreatedAt() TransactionQuerySet {
	return qs.w(qs.db.Order("created_at DESC"))
}

// OrderDescByDeletedAt is an autogenerated method
// nolint: dupl
func (qs TransactionQuerySet) OrderDescByDeletedAt() TransactionQuerySet {
	return qs.w(qs.db.Order("deleted_at DESC"))
}

// OrderDescByID is an autogenerated method
// nolint: dupl
func (qs TransactionQuerySet) OrderDescByID() TransactionQuerySet {
	return qs.w(qs.db.Order("id DESC"))
}

// OrderDescByStartedAt is an autogenerated method
// nolint: dupl
func (qs TransactionQuerySet) OrderDescByStartedAt() TransactionQuerySet {
	return qs.w(qs.db.Order("started_at DESC"))
}

// OrderDescByUpdatedAt is an autogenerated method
// nolint: dupl
func (qs TransactionQuerySet) OrderDescByUpdatedAt() TransactionQuerySet {
	return qs.w(qs.db.Order("updated_at DESC"))
}

// PaymentSystemNameEq is an autogenerated method
// nolint: dupl
func (qs TransactionQuerySet) PaymentSystemNameEq(paymentSystemName string) TransactionQuerySet {
	return qs.w(qs.db.Where("payment_system_name = ?", paymentSystemName))
}

// PaymentSystemNameIn is an autogenerated method
// nolint: dupl
func (qs TransactionQuerySet) PaymentSystemNameIn(paymentSystemName string, paymentSystemNameRest ...string) TransactionQuerySet {
	iArgs := []interface{}{paymentSystemName}
	for _, arg := range paymentSystemNameRest {
		iArgs = append(iArgs, arg)
	}
	return qs.w(qs.db.Where("payment_system_name IN (?)", iArgs))
}

// PaymentSystemNameNe is an autogenerated method
// nolint: dupl
func (qs TransactionQuerySet) PaymentSystemNameNe(paymentSystemName string) TransactionQuerySet {
	return qs.w(qs.db.Where("payment_system_name != ?", paymentSystemName))
}

// PaymentSystemNameNotIn is an autogenerated method
// nolint: dupl
func (qs TransactionQuerySet) PaymentSystemNameNotIn(paymentSystemName string, paymentSystemNameRest ...string) TransactionQuerySet {
	iArgs := []interface{}{paymentSystemName}
	for _, arg := range paymentSystemNameRest {
		iArgs = append(iArgs, arg)
	}
	return qs.w(qs.db.Where("payment_system_name NOT IN (?)", iArgs))
}

// RecieverWalletIDEq is an autogenerated method
// nolint: dupl
func (qs TransactionQuerySet) RecieverWalletIDEq(recieverWalletID string) TransactionQuerySet {
	return qs.w(qs.db.Where("reciever_wallet_id = ?", recieverWalletID))
}

// RecieverWalletIDIn is an autogenerated method
// nolint: dupl
func (qs TransactionQuerySet) RecieverWalletIDIn(recieverWalletID string, recieverWalletIDRest ...string) TransactionQuerySet {
	iArgs := []interface{}{recieverWalletID}
	for _, arg := range recieverWalletIDRest {
		iArgs = append(iArgs, arg)
	}
	return qs.w(qs.db.Where("reciever_wallet_id IN (?)", iArgs))
}

// RecieverWalletIDNe is an autogenerated method
// nolint: dupl
func (qs TransactionQuerySet) RecieverWalletIDNe(recieverWalletID string) TransactionQuerySet {
	return qs.w(qs.db.Where("reciever_wallet_id != ?", recieverWalletID))
}

// RecieverWalletIDNotIn is an autogenerated method
// nolint: dupl
func (qs TransactionQuerySet) RecieverWalletIDNotIn(recieverWalletID string, recieverWalletIDRest ...string) TransactionQuerySet {
	iArgs := []interface{}{recieverWalletID}
	for _, arg := range recieverWalletIDRest {
		iArgs = append(iArgs, arg)
	}
	return qs.w(qs.db.Where("reciever_wallet_id NOT IN (?)", iArgs))
}

// SenderWalletIDEq is an autogenerated method
// nolint: dupl
func (qs TransactionQuerySet) SenderWalletIDEq(senderWalletID string) TransactionQuerySet {
	return qs.w(qs.db.Where("sender_wallet_id = ?", senderWalletID))
}

// SenderWalletIDIn is an autogenerated method
// nolint: dupl
func (qs TransactionQuerySet) SenderWalletIDIn(senderWalletID string, senderWalletIDRest ...string) TransactionQuerySet {
	iArgs := []interface{}{senderWalletID}
	for _, arg := range senderWalletIDRest {
		iArgs = append(iArgs, arg)
	}
	return qs.w(qs.db.Where("sender_wallet_id IN (?)", iArgs))
}

// SenderWalletIDNe is an autogenerated method
// nolint: dupl
func (qs TransactionQuerySet) SenderWalletIDNe(senderWalletID string) TransactionQuerySet {
	return qs.w(qs.db.Where("sender_wallet_id != ?", senderWalletID))
}

// SenderWalletIDNotIn is an autogenerated method
// nolint: dupl
func (qs TransactionQuerySet) SenderWalletIDNotIn(senderWalletID string, senderWalletIDRest ...string) TransactionQuerySet {
	iArgs := []interface{}{senderWalletID}
	for _, arg := range senderWalletIDRest {
		iArgs = append(iArgs, arg)
	}
	return qs.w(qs.db.Where("sender_wallet_id NOT IN (?)", iArgs))
}

// SetAmount is an autogenerated method
// nolint: dupl
func (u TransactionUpdater) SetAmount(amount uint) TransactionUpdater {
	u.fields[string(TransactionDBSchema.Amount)] = amount
	return u
}

// SetCreatedAt is an autogenerated method
// nolint: dupl
func (u TransactionUpdater) SetCreatedAt(createdAt time.Time) TransactionUpdater {
	u.fields[string(TransactionDBSchema.CreatedAt)] = createdAt
	return u
}

// SetCurrencyCode is an autogenerated method
// nolint: dupl
func (u TransactionUpdater) SetCurrencyCode(currencyCode string) TransactionUpdater {
	u.fields[string(TransactionDBSchema.CurrencyCode)] = currencyCode
	return u
}

// SetDeletedAt is an autogenerated method
// nolint: dupl
func (u TransactionUpdater) SetDeletedAt(deletedAt *time.Time) TransactionUpdater {
	u.fields[string(TransactionDBSchema.DeletedAt)] = deletedAt
	return u
}

// SetExternalID is an autogenerated method
// nolint: dupl
func (u TransactionUpdater) SetExternalID(externalID string) TransactionUpdater {
	u.fields[string(TransactionDBSchema.ExternalID)] = externalID
	return u
}

// SetID is an autogenerated method
// nolint: dupl
func (u TransactionUpdater) SetID(ID uint) TransactionUpdater {
	u.fields[string(TransactionDBSchema.ID)] = ID
	return u
}

// SetIncoming is an autogenerated method
// nolint: dupl
func (u TransactionUpdater) SetIncoming(incoming bool) TransactionUpdater {
	u.fields[string(TransactionDBSchema.Incoming)] = incoming
	return u
}

// SetPaymentSystemName is an autogenerated method
// nolint: dupl
func (u TransactionUpdater) SetPaymentSystemName(paymentSystemName string) TransactionUpdater {
	u.fields[string(TransactionDBSchema.PaymentSystemName)] = paymentSystemName
	return u
}

// SetRecieverWalletID is an autogenerated method
// nolint: dupl
func (u TransactionUpdater) SetRecieverWalletID(recieverWalletID string) TransactionUpdater {
	u.fields[string(TransactionDBSchema.RecieverWalletID)] = recieverWalletID
	return u
}

// SetSenderWalletID is an autogenerated method
// nolint: dupl
func (u TransactionUpdater) SetSenderWalletID(senderWalletID string) TransactionUpdater {
	u.fields[string(TransactionDBSchema.SenderWalletID)] = senderWalletID
	return u
}

// SetStartedAt is an autogenerated method
// nolint: dupl
func (u TransactionUpdater) SetStartedAt(startedAt time.Time) TransactionUpdater {
	u.fields[string(TransactionDBSchema.StartedAt)] = startedAt
	return u
}

// SetStatus is an autogenerated method
// nolint: dupl
func (u TransactionUpdater) SetStatus(status string) TransactionUpdater {
	u.fields[string(TransactionDBSchema.Status)] = status
	return u
}

// SetUpdatedAt is an autogenerated method
// nolint: dupl
func (u TransactionUpdater) SetUpdatedAt(updatedAt time.Time) TransactionUpdater {
	u.fields[string(TransactionDBSchema.UpdatedAt)] = updatedAt
	return u
}

// StartedAtEq is an autogenerated method
// nolint: dupl
func (qs TransactionQuerySet) StartedAtEq(startedAt time.Time) TransactionQuerySet {
	return qs.w(qs.db.Where("started_at = ?", startedAt))
}

// StartedAtGt is an autogenerated method
// nolint: dupl
func (qs TransactionQuerySet) StartedAtGt(startedAt time.Time) TransactionQuerySet {
	return qs.w(qs.db.Where("started_at > ?", startedAt))
}

// StartedAtGte is an autogenerated method
// nolint: dupl
func (qs TransactionQuerySet) StartedAtGte(startedAt time.Time) TransactionQuerySet {
	return qs.w(qs.db.Where("started_at >= ?", startedAt))
}

// StartedAtLt is an autogenerated method
// nolint: dupl
func (qs TransactionQuerySet) StartedAtLt(startedAt time.Time) TransactionQuerySet {
	return qs.w(qs.db.Where("started_at < ?", startedAt))
}

// StartedAtLte is an autogenerated method
// nolint: dupl
func (qs TransactionQuerySet) StartedAtLte(startedAt time.Time) TransactionQuerySet {
	return qs.w(qs.db.Where("started_at <= ?", startedAt))
}

// StartedAtNe is an autogenerated method
// nolint: dupl
func (qs TransactionQuerySet) StartedAtNe(startedAt time.Time) TransactionQuerySet {
	return qs.w(qs.db.Where("started_at != ?", startedAt))
}

// StatusEq is an autogenerated method
// nolint: dupl
func (qs TransactionQuerySet) StatusEq(status string) TransactionQuerySet {
	return qs.w(qs.db.Where("status = ?", status))
}

// StatusIn is an autogenerated method
// nolint: dupl
func (qs TransactionQuerySet) StatusIn(status string, statusRest ...string) TransactionQuerySet {
	iArgs := []interface{}{status}
	for _, arg := range statusRest {
		iArgs = append(iArgs, arg)
	}
	return qs.w(qs.db.Where("status IN (?)", iArgs))
}

// StatusNe is an autogenerated method
// nolint: dupl
func (qs TransactionQuerySet) StatusNe(status string) TransactionQuerySet {
	return qs.w(qs.db.Where("status != ?", status))
}

// StatusNotIn is an autogenerated method
// nolint: dupl
func (qs TransactionQuerySet) StatusNotIn(status string, statusRest ...string) TransactionQuerySet {
	iArgs := []interface{}{status}
	for _, arg := range statusRest {
		iArgs = append(iArgs, arg)
	}
	return qs.w(qs.db.Where("status NOT IN (?)", iArgs))
}

// Update is an autogenerated method
// nolint: dupl
func (u TransactionUpdater) Update() error {
	return u.db.Updates(u.fields).Error
}

// UpdateNum is an autogenerated method
// nolint: dupl
func (u TransactionUpdater) UpdateNum() (int64, error) {
	db := u.db.Updates(u.fields)
	return db.RowsAffected, db.Error
}

// UpdatedAtEq is an autogenerated method
// nolint: dupl
func (qs TransactionQuerySet) UpdatedAtEq(updatedAt time.Time) TransactionQuerySet {
	return qs.w(qs.db.Where("updated_at = ?", updatedAt))
}

// UpdatedAtGt is an autogenerated method
// nolint: dupl
func (qs TransactionQuerySet) UpdatedAtGt(updatedAt time.Time) TransactionQuerySet {
	return qs.w(qs.db.Where("updated_at > ?", updatedAt))
}

// UpdatedAtGte is an autogenerated method
// nolint: dupl
func (qs TransactionQuerySet) UpdatedAtGte(updatedAt time.Time) TransactionQuerySet {
	return qs.w(qs.db.Where("updated_at >= ?", updatedAt))
}

// UpdatedAtLt is an autogenerated method
// nolint: dupl
func (qs TransactionQuerySet) UpdatedAtLt(updatedAt time.Time) TransactionQuerySet {
	return qs.w(qs.db.Where("updated_at < ?", updatedAt))
}

// UpdatedAtLte is an autogenerated method
// nolint: dupl
func (qs TransactionQuerySet) UpdatedAtLte(updatedAt time.Time) TransactionQuerySet {
	return qs.w(qs.db.Where("updated_at <= ?", updatedAt))
}

// UpdatedAtNe is an autogenerated method
// nolint: dupl
func (qs TransactionQuerySet) UpdatedAtNe(updatedAt time.Time) TransactionQuerySet {
	return qs.w(qs.db.Where("updated_at != ?", updatedAt))
}

// ===== END of query set TransactionQuerySet

// ===== BEGIN of Transaction modifiers

type transactionDBSchemaField string

func (f transactionDBSchemaField) String() string {
	return string(f)
}

// TransactionDBSchema stores db field names of Transaction
var TransactionDBSchema = struct {
	ID                transactionDBSchemaField
	CreatedAt         transactionDBSchemaField
	UpdatedAt         transactionDBSchemaField
	DeletedAt         transactionDBSchemaField
	ExternalID        transactionDBSchemaField
	StartedAt         transactionDBSchemaField
	Amount            transactionDBSchemaField
	CurrencyCode      transactionDBSchemaField
	PaymentSystemName transactionDBSchemaField
	Incoming          transactionDBSchemaField
	SenderWalletID    transactionDBSchemaField
	RecieverWalletID  transactionDBSchemaField
	Status            transactionDBSchemaField
}{

	ID:                transactionDBSchemaField("id"),
	CreatedAt:         transactionDBSchemaField("created_at"),
	UpdatedAt:         transactionDBSchemaField("updated_at"),
	DeletedAt:         transactionDBSchemaField("deleted_at"),
	ExternalID:        transactionDBSchemaField("external_id"),
	StartedAt:         transactionDBSchemaField("started_at"),
	Amount:            transactionDBSchemaField("amount"),
	CurrencyCode:      transactionDBSchemaField("currency_code"),
	PaymentSystemName: transactionDBSchemaField("payment_system_name"),
	Incoming:          transactionDBSchemaField("incoming"),
	SenderWalletID:    transactionDBSchemaField("sender_wallet_id"),
	RecieverWalletID:  transactionDBSchemaField("reciever_wallet_id"),
	Status:            transactionDBSchemaField("status"),
}

// Update updates Transaction fields by primary key
func (o *Transaction) Update(db *gorm.DB, fields ...transactionDBSchemaField) error {
	dbNameToFieldName := map[string]interface{}{
		"id":                  o.ID,
		"created_at":          o.CreatedAt,
		"updated_at":          o.UpdatedAt,
		"deleted_at":          o.DeletedAt,
		"external_id":         o.ExternalID,
		"started_at":          o.StartedAt,
		"amount":              o.Amount,
		"currency_code":       o.CurrencyCode,
		"payment_system_name": o.PaymentSystemName,
		"incoming":            o.Incoming,
		"sender_wallet_id":    o.SenderWalletID,
		"reciever_wallet_id":  o.RecieverWalletID,
		"status":              o.Status,
	}
	u := map[string]interface{}{}
	for _, f := range fields {
		fs := f.String()
		u[fs] = dbNameToFieldName[fs]
	}
	if err := db.Model(o).Updates(u).Error; err != nil {
		if err == gorm.ErrRecordNotFound {
			return err
		}

		return fmt.Errorf("can't update Transaction %v fields %v: %s",
			o, fields, err)
	}

	return nil
}

// TransactionUpdater is an Transaction updates manager
type TransactionUpdater struct {
	fields map[string]interface{}
	db     *gorm.DB
}

// NewTransactionUpdater creates new Transaction updater
func NewTransactionUpdater(db *gorm.DB) TransactionUpdater {
	return TransactionUpdater{
		fields: map[string]interface{}{},
		db:     db.Model(&Transaction{}),
	}
}

// ===== END of Transaction modifiers

// ===== END of all query sets
