// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package models

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
	time "time"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjsonC4224a68DecodeGithubComZhuharevQiwiAdminModels(in *jlexer.Lexer, out *Txn) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "qiwi_txn_id":
			out.QiwiTxnID = uint(in.Uint())
		case "txn_type":
			out.TxnType = TxnType(in.Uint())
		case "provider_id":
			out.ProviderID = uint(in.Uint())
		case "amount":
			out.Amount = float64(in.Float64())
		case "qiwi_created_at":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.QiwiCreatedAt).UnmarshalJSON(data))
			}
		case "fee":
			out.Fee = float64(in.Float64())
		case "status":
			out.Status = Status(in.Uint())
		case "comment":
			out.Comment = string(in.String())
		case "wallet_id":
			out.WalletID = uint(in.Uint())
		case "id":
			out.ID = uint(in.Uint())
		case "created_at":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.CreatedAt).UnmarshalJSON(data))
			}
		case "updated_at":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.UpdatedAt).UnmarshalJSON(data))
			}
		case "deleted_at":
			if in.IsNull() {
				in.Skip()
				out.DeletedAt = nil
			} else {
				if out.DeletedAt == nil {
					out.DeletedAt = new(time.Time)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.DeletedAt).UnmarshalJSON(data))
				}
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC4224a68EncodeGithubComZhuharevQiwiAdminModels(out *jwriter.Writer, in Txn) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"qiwi_txn_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint(uint(in.QiwiTxnID))
	}
	{
		const prefix string = ",\"txn_type\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint(uint(in.TxnType))
	}
	{
		const prefix string = ",\"provider_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint(uint(in.ProviderID))
	}
	{
		const prefix string = ",\"amount\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float64(float64(in.Amount))
	}
	{
		const prefix string = ",\"qiwi_created_at\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Raw((in.QiwiCreatedAt).MarshalJSON())
	}
	{
		const prefix string = ",\"fee\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float64(float64(in.Fee))
	}
	{
		const prefix string = ",\"status\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint(uint(in.Status))
	}
	{
		const prefix string = ",\"comment\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Comment))
	}
	{
		const prefix string = ",\"wallet_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint(uint(in.WalletID))
	}
	{
		const prefix string = ",\"id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint(uint(in.ID))
	}
	{
		const prefix string = ",\"created_at\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Raw((in.CreatedAt).MarshalJSON())
	}
	{
		const prefix string = ",\"updated_at\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Raw((in.UpdatedAt).MarshalJSON())
	}
	{
		const prefix string = ",\"deleted_at\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.DeletedAt == nil {
			out.RawString("null")
		} else {
			out.Raw((*in.DeletedAt).MarshalJSON())
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Txn) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC4224a68EncodeGithubComZhuharevQiwiAdminModels(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Txn) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC4224a68EncodeGithubComZhuharevQiwiAdminModels(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Txn) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC4224a68DecodeGithubComZhuharevQiwiAdminModels(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Txn) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC4224a68DecodeGithubComZhuharevQiwiAdminModels(l, v)
}
